%name{
	
	delim 		:	"[ \r\n\t]"			;
	comment		:	"/\*([^\*]|\*+[^\*/])*\*+/"	;
	comment_line	:	"//[^\n]*\n"			;
	digit		:	"[0-9]"				;
	number 		:	"{digit}+"			;
	letter		:	"[A-Z_a-z]"			;

	oct		:	"(\\[0-3][0-7][0-7])|(\\[0-7][0-7])|(\\[0-7])"	;

	/*
		'"'  == \x22, 
		'\'' == \x27
	*/	
	escape_seq	:	"(\\(b|t|n|f|r|\x22|\x27|\\))|{oct}"		;

	string_literal	: 	"\x22{escape_seq}\x22"				;
}


%token /*acb*/{

	%skip 		:	"{delim}+|{comment}+|{comment_line}+",1;


	INTEGER		: 	"{number}"			;
	FLOAT		:	"{number}"			;
	STRING		:	"{string_literal}"		;
	ID		:	"{letter}({letter}|{digit})*"  	, 1	;

	"="		:	'"="'			, 1	;
	"&&"		:	'"&&"' 			, 1	;
	"||"		:	'"||"' 			, 1	;
	"=="		:	'"=="' 			, 1	;
	"!="		:	'"!="'			, 1	;
	"<"		:	'"<"'			, 1	;
	">"		:	'">"'			, 1	;
	"<="		:	'"<="' 			, 1	;
	">="		:	'">="' 			, 1	;


	"+"		:	'"+"'			,1	;
	"-"		:	'"-"'			,1	;
	"*"		:	'"*"'			,1	;
	"/"		:	'"/"'			,1	;
	"%"		:	'"%"'			,1	;

	"!"		:	'"!"'			,1	;
	"["		:	'"["'			,1	;
	"]"		:	'"]"'			,1	;
	"("		:	'"("'			,1	;
	")"		:	'")"'			,1	;
	"{"		:	'"{"'			,1	;
	"}"		:	'"}"'			,1	;
	";"		:	'";"'			,1	;		
	","		:	'","'			,1	;

	"int"		:	'"int"'			,1	;
	"float"		:	'"float"'		,1	;
	"bool"		:	'"bool"'		,1	;
	"char"		:	'"char"'		,1	;

	"for"		:	'"for"'			,1	;
	"if"		:	'"if"'			,1	;
	"break"		:	'"break"'		,1	;
	"do"		:	'"do"'			,1	;
	"else"		:	'"else"'		,1	;
	"while"		:	'"while"'		,1	;
	
	"true"		:	'"true"'		,1	;
	"false"		:	'"false"'		,1	;
}




%prec{

%noassoc 	IF_STMT_PREC;
%noassoc	IF_STMT_ELSE_STMT_PREC;

}




%rule {
	program 	:	block			
			;

	block		:	"{" decls stmts "}"
			;

	decls		:	decls decl 
			| 	.			
			;

	decl		:	type id ";"		
			;


	type		:	type "[" int_const "]" 
			| 	int 
			| 	float 
			| 	bool 
			|	char			
			; 


	stmts		:	stmts stmt
			|	.
			;


	stmt		:	loc "=" bool_expr ";"
			|	if "(" bool_expr ")" stmt %prec IF_STMT_PREC
			|	if "(" bool_expr ")" stmt else stmt %prec IF_STMT_ELSE_STMT_PREC
			|	while "(" bool_expr ")" stmt
			|	do stmt while "(" bool_expr ")" ";"
			|	break ";"
			|	block			
			;

	
	loc		:	loc "[" bool_expr "]"
			| 	id
			;	
	bool_expr	:	bool_expr "||" join 
			| 	join
			;

	join		:	join "&&" equality 
			| 	equality
			;
	equality	:	equality "==" rel 
			| 	equality "!=" rel 
			| 	rel	
			;
	rel		:	expr "<" expr 
			| 	expr "<=" expr 
			|	expr ">=" expr 
			| 	expr ">" expr 
			| 	expr
			;

	expr		:	expr "+" term 
			| 	expr "-" term 
			| 	term
			;

	term		:	term "*" unary 
			| 	term "/" unary 
			| 	term "%" unary 
			| 	unary
			;

	unary		:	"!" unary 
			| 	"-" unary 
			| 	factor
			;

	factor		:	"(" bool_expr")" 
			| 	loc 
			| 	INTEGER
			|	FLOAT
			|	STRING %handler __handle_factor
			|	true 
			| 	false 
			;
}


