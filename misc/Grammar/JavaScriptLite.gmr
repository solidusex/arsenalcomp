%name	delim 		:	"[ \r\n\t]"			
				;
%name	comment		:	"/\*([^\*]|\*+[^\*/])*\*+/"	
				;
%name	comment_line	:	"//[^\n]*\n"			
				;
%name	digit			:	"[0-9]"				
				;
%name	number		:	"{digit}+"				
				;
%name	letter		:	"[A-Z_a-z]"
				;





%name hex_digit		:	"[0-9a-fA-F]"
				;

%name hex_literal 	:	"0(x|X){hex_digit}+"
				;


%name dec_literal	:	"(0|[1-9][0-9]*)"
				;





%name skip_lexem	: 	"{delim}|{comment}|{comment_line}"
				;

/*  '"'  == \x22  */

%name	string_literal	: 	"(\x22((\\(\x22))|[^\x22\\])*\x22)"
				;


%token %skip 		:	"{skip_lexem}+"									,1		%action	"TOK_DELIM_ID"		;



			


/*
由于引擎本身的算法原因，必须把相同前缀最长的匹配的优先级提到最高，例如匹配
"=" 和"=="，需要把==的优先级设置到大于"="才可以正常匹配
*/

%token	NUMBER		:	"({hex_literal}|{dec_literal})(?!{keyword_lhd})"	,2	%action "TOK_NUMBER"	;


%token	STRING_LITERAL	:	"{string_literal}"							%action "TOK_STRING_LITERAL"	;	
%token	IDENTIFIER		:	"{letter}({letter}|{digit})*"					%action "TOK_IDENTIFIER"		;


%name		keyword_lhd	:	"[A-Z_a-z0-9]"														;




%token	"switch"	:	'"switch"(?!{keyword_lhd})'	,1					%action 	"TOK_SWITCH"		;//SWITCH
%token	"for"		:	'"for"(?!{keyword_lhd})'		,1					%action	"TOK_FOR"			;//FOR

%token	"return"	:	'"return"(?!{keyword_lhd})'	,1					%action	"TOK_RETURN"		;//RETURN
%token	"do"		:	'"do"(?!{keyword_lhd})'		,1					%action	"TOK_DO"			;//DO
%token	"while"	:	'"while"(?!{keyword_lhd})'		,1					%action	"TOK_WHILE"		;//WHILE
%token	"if"		:	'"if"(?!{keyword_lhd})'		,1					%action	"TOK_IF"			;//IF
%token	"else"	:	'"else"(?!{keyword_lhd})'		,1					%action	"TOK_ELSE"			;//ELSE



%token	"true"	:	'"true"(?!{keyword_lhd})'		,1					%action	"TOK_TRUE"			;
%token	"false"	:	'"false"(?!{keyword_lhd})'		,1					%action	"TOK_FALSE"		;
%token	"this"	:	'"this"(?!{keyword_lhd})'		,1					%action	"TOK_THIS"			;

%token	"null"	:	'"null"(?!{keyword_lhd})'		,1					%action	"TOK_NULL"			;
%token	"const"	:	'"const"(?!{keyword_lhd})'		,1					%action	"TOK_CONST"		;
%token	"in"		:	'"in"(?!{keyword_lhd})'		,1					%action	"TOK_IN"			;
%token	"new"		:	'"new"(?!{keyword_lhd})'		,1					%action	"TOK_NEW"			;
%token	"delete"	:	'"delete"(?!{keyword_lhd})'		,1				%action	"TOK_DELETE"		;
%token	"typeof"	:	'"typeof"(?!{keyword_lhd})'		,1				%action	"TOK_TYPEOF"		;
%token	"function"	:	'"function"(?!{keyword_lhd})'		,1				%action	"TOK_FUNCTION"		;
%token	"var"		:	'"var"(?!{keyword_lhd})'			,1				%action	"TOK_VAR"			;
%token	"with"	:	'"with"(?!{keyword_lhd})'			,1				%action	"TOK_WITH"			;
%token	"instanceof"	:	'"instanceof"(?!{keyword_lhd})'		,1			%action	"TOK_INSTANCEOF"	;
%token	"debugger"	:	'"debugger"(?!{keyword_lhd})'		,1			%action	"TOK_DEBUGGER"	;
%token	"try"		:	'"try"(?!{keyword_lhd})'		,1					%action	"TOK_TRY"			;
%token	"catch"	:	'"catch"(?!{keyword_lhd})'		,1					%action	"TOK_CATCH"		;
%token	"finally"	:	'"finally"(?!{keyword_lhd})'	,1					%action	"TOK_FINALLY"		;
%token	"throw"	:	'"throw"(?!{keyword_lhd})'		,1					%action	"TOK_THROW"		;


%token	"continue"	:	'"continue"(?!{keyword_lhd})'	,1					%action	"TOK_CONTINUE"		;//CONTINUE
%token	"default"	:	'"default"(?!{keyword_lhd})'	,1					%action	"TOK_DEFAULT"		;//DEFAULT
%token	"case"	:	'"case"(?!{keyword_lhd})'		,1					%action	"TOK_CASE"			;//CASE
%token	"break"	:	'"break"(?!{keyword_lhd})'		,1					%action	"TOK_BREAK"		;//BREAK





%token	"void"	:	'"void"(?!{keyword_lhd})'		,1					%action	"TOK_VOID"			;//VOID




%token	">>="		:	'">>="'		,2								%action	"TOK_RIGHT_ASSIGN"	;//RIGHT_ASSIGN
%token	"<<="		:	'"<<="'		,2								%action	"TOK_LEFT_ASSIGN"	;//LEFT_ASSIGN


%token	">>>="	:	'">>>="'		,3								%action	"TOK_UNSIGNED_RIGHT_ASSIGN"	;

%token	">>>"		:	'">>>"'		,2								%action	"TOK_UNSIGNED_RIGHT"			;

%token	"==="		:	'"==="'		,2								%action	"TOK_STRICT_EQ_OP"			;
%token	"!=="		:	'"!=="'		,2								%action	"TOK_STRICT_NE_OP"			;






%token	"+="		:	'"+="'		,1								%action	"TOK_ADD_ASSIGN"	;//ADD_ASSIGN
%token	"-="		:	'"-="'		,1								%action	"TOK_SUB_ASSIGN"	;//SUB_ASSIGN
%token	"*="		:	'"*="'		,1								%action	"TOK_MUL_ASSIGN"	;//MUL_ASSIGN
%token	"/="		:	'"/="'		,1								%action	"TOK_DIV_ASSIGN"	;//DIV_ASSIGN
%token	"%="		:	'"%="'		,1								%action	"TOK_MOD_ASSIGN"	;//MOD_ASSIGN
%token	"&="		:	'"&="'		,1								%action	"TOK_AND_ASSIGN"	;//AND_ASSIGN

%token	"^="		:	'"^="'		,1								%action	"TOK_XOR_ASSIGN"	;//XOR_ASSIGN
%token	"|="		:	'"|="'		,1								%action	"TOK_OR_ASSIGN"		;//OR_ASSIGN
%token	">>"		:	'">>"'		,1								%action	"TOK_RIGHT_OP"		;//RIGHT_OP
%token	"<<"		:	'"<<"'		,1								%action	"TOK_LEFT_OP"		;//LEFT_OP
%token	"++"		:	'"++"'		,1								%action	"TOK_INC_OP"		;//INC_OP
%token	"--"		:	'"--"'		,1								%action	"TOK_DEC_OP"		;//DEC_OP



%token	"&&"		:	'"&&"'		,1								%action	"TOK_AND_OP"		;//AND_OP
%token	"||"		:	'"||"'		,1								%action	"TOK_OR_OP"		;//OR_OP

%token	"<="		:	'"<="'		,1								%action 	"TOK_LE_OP"		;//LE_OP
%token	">="		:	'">="'		,1								%action 	"TOK_GE_OP"		;//GE_OP
%token	"=="		:	'"=="'		,1								%action 	"TOK_EQ_OP"		;//EQ_OP
%token	"!="		:	'"!="'		,1								%action	"TOK_NE_OP"		;//NE_OP
%token	"<"		:	'"<"'			,0								%action	"TOK_LESS_OP"		;//<
%token	">"		:	'">"'			,0								%action	"TOK_GREATER_OP"	;//>



%token	";"		:	'";"'			,0								%action "TOK_SEMICOLON"			;//;
%token	"{"		:	'"{"'			,0								%action "TOK_L_BRACES"			;//{
%token	"}"		:	'"}"'			,0								%action "TOK_R_BRACES"			;//}
%token	","		:	'","'			,0								%action "TOK_COMMA"				;//,
%token	":"		:	'":"'			,0								%action "TOK_COLON"				;//:
%token	"="		:	'"="'			,0								%action "TOK_ASSIGN"				;//=
%token	"("		:	'"("'			,0								%action "TOK_L_PAREN"				;//(
%token	")"		:	'")"'			,0								%action "TOK_R_PAREN"				;//)
%token	"["		:	'"["'			,0								%action "TOK_L_SQUARE"			;//[
%token	"]"		:	'"]"'			,0								%action "TOK_R_SQUARE"			;//]
%token	"."		:	'"."'			,0								%action "TOK_DOT"				;//.
%token	"&"		:	'"&"'			,0								%action "TOK_AND"				;//&
%token	"!"		:	'"!"'			,0								%action "TOK_NOT"				;//!
%token	"~"		:	'"~"'			,0								%action "TOK_TILDE"				;//~
%token	"+"		:	'"+"'			,0								%action "TOK_ADD"				;//+
%token	"-"		:	'"-"'			,0								%action "TOK_SUB"				;//-
%token	"*"		:	'"*"'			,0								%action "TOK_MUL"				;//*
%token	"/"		:	'"/"'			,0								%action "TOK_DIV"				;///
%token	"%"		:	'"%"'			,0								%action "TOK_MOD"				;//%

%token	"^"		:	'"^"'			,0								%action "TOK_XOR"				;//^
%token	"|"		:	'"|"'			,0								%action "TOK_OR"				;//|
%token	"?"		:	'"?"'			,0								%action "TOK_QUEST"				;//?




%nonassoc IF_WITHOUT_ELSE	;
%nonassoc "else"		;


%start	Program		;

Literal	:	"null"
  		|	"true"
  		|	"false"
		| 	NUMBER
  		| 	STRING_LITERAL
		;

Property	:    IDENTIFIER 	":"	AssignmentExpr 	
		|	STRING_LITERAL	":"	AssignmentExpr
		|	NUMBER 		":"	AssignmentExpr
		|	IDENTIFIER IDENTIFIER "(" ")" "{" 	FunctionBody 	"}"
		|	IDENTIFIER IDENTIFIER "(" FormalParameterList ")" 	"{" FunctionBody "}"
		;


PropertyList	:	Property
  			|	PropertyList "," Property
			;

PrimaryExpr	:	PrimaryExprNoBrace
  			|	"{" 	"}"
  			|	"{" PropertyList "}"
  			|	"{" PropertyList "," "}"
			;


PrimaryExprNoBrace	:   "this"
  				|	Literal
  				|	ArrayLiteral
				|	IDENTIFIER
  				|	"("	Expr	")"
				;

ArrayLiteral		:    "[" ElisionOpt "]"
  				|	"[" ElementList "]" 
  				|	"[" ElementList "," ElisionOpt "]"
				;

ElementList		:	ElisionOpt AssignmentExpr
  				|	ElementList "," ElisionOpt AssignmentExpr
				;

ElisionOpt		:	.
  			|	Elision
			;

Elision		:	","                                 
  			| 	Elision ","                         
			;


MemberExpr		:	PrimaryExpr
  			|	FunctionExpr                        
  			|	MemberExpr "[" Expr "]"             
  			|	MemberExpr "." IDENTIFIER         
  			|	"new" MemberExpr Arguments     
			;

MemberExprNoBF	:	PrimaryExprNoBrace
  			|	MemberExprNoBF "[" Expr "]"  
  			|	MemberExprNoBF "." IDENTIFIER     
  			|	"new" MemberExpr Arguments     
			;

NewExpr		:    MemberExpr
  			|	"new"	NewExpr 
			;

NewExprNoBF	:	MemberExprNoBF
	 		|	"new" NewExpr         
			;

CallExpr		:	MemberExpr Arguments      
  			|	CallExpr Arguments        
  			|	CallExpr "[" Expr "]"     
  			|	CallExpr "." IDENTIFIER        
			;

CallExprNoBF	:	MemberExprNoBF Arguments     
			|	CallExprNoBF Arguments       
  			|	CallExprNoBF "[" Expr "]"    
			|	CallExprNoBF "." IDENTIFIER  
			;

Arguments		:	"(" ")"                   
  			|	"(" ArgumentList ")"      
			;

ArgumentList	:	AssignmentExpr            
  			|	ArgumentList "," AssignmentExpr 
			;

LeftHandSideExpr:	NewExpr
  			|	CallExpr
			;

LeftHandSideExprNoBF	:	NewExprNoBF
  				|	CallExprNoBF
				;

PostfixExpr		:	LeftHandSideExpr
  				|	LeftHandSideExpr "++"
  				|	LeftHandSideExpr "--"
				;

PostfixExprNoBF		:	LeftHandSideExprNoBF
  				|	LeftHandSideExprNoBF "++"
  				|	LeftHandSideExprNoBF "--"
				;

UnaryExprCommon		:	"delete" UnaryExpr            
  				|	"void" UnaryExpr          
  				|	"typeof" UnaryExpr             
  				|	"++" UnaryExpr           
  				|	"--" UnaryExpr       
  				|	"+" UnaryExpr              
  				|	"-" UnaryExpr              
  				|	"~" UnaryExpr              
  				|	"!" UnaryExpr
//  | AUTOMINUSMINUS UnaryExpr   
//  | AUTOPLUSPLUS UnaryExpr     
				;

UnaryExpr			:	PostfixExpr
  				|	UnaryExprCommon
				;

UnaryExprNoBF		:	PostfixExprNoBF
  				|	UnaryExprCommon
				;

MultiplicativeExpr	:    UnaryExpr
  				|	MultiplicativeExpr "*" UnaryExpr 
  				|	MultiplicativeExpr "/" UnaryExpr 
  				|	MultiplicativeExpr "%" UnaryExpr 
				;

MultiplicativeExprNoBF:    UnaryExprNoBF
  				|	MultiplicativeExprNoBF "*" UnaryExpr
                     	|	MultiplicativeExprNoBF "/" UnaryExpr
  				|	MultiplicativeExprNoBF "%" UnaryExpr
				;

AdditiveExpr		:    MultiplicativeExpr
  				|	AdditiveExpr "+" MultiplicativeExpr
  				| 	AdditiveExpr "-" MultiplicativeExpr
				;

AdditiveExprNoBF	:	MultiplicativeExprNoBF
  				|	AdditiveExprNoBF "+" MultiplicativeExpr
  				| 	AdditiveExprNoBF "-" MultiplicativeExpr
				;

ShiftExpr			:	AdditiveExpr
  				|	ShiftExpr "<<"	AdditiveExpr    
  				|	ShiftExpr ">>"	AdditiveExpr    
  				|	ShiftExpr ">>>"	AdditiveExpr   
				;

ShiftExprNoBF		:    AdditiveExprNoBF
  				|	ShiftExprNoBF "<<" AdditiveExpr
  				|	ShiftExprNoBF ">>" AdditiveExpr
  				|	ShiftExprNoBF ">>>" AdditiveExpr
				;

RelationalExpr		:    ShiftExpr
  				|	RelationalExpr "<" ShiftExpr      
  				|	RelationalExpr ">" ShiftExpr      
  				|	RelationalExpr "<=" ShiftExpr       
  				|	RelationalExpr ">=" ShiftExpr       
	 			|	RelationalExpr "instanceof" ShiftExpr 
				|	RelationalExpr "in"	ShiftExpr    
				;

RelationalExprNoIn	:    ShiftExpr
  				|	RelationalExprNoIn "<" ShiftExpr    
  				|	RelationalExprNoIn ">" ShiftExpr    
  				|	RelationalExprNoIn "<=" ShiftExpr     
  				|	RelationalExprNoIn ">=" ShiftExpr     
  				|	RelationalExprNoIn "instanceof" ShiftExpr
				;

RelationalExprNoBF	:    ShiftExprNoBF
  				|	RelationalExprNoBF "<" ShiftExpr   
  				|	RelationalExprNoBF ">" ShiftExpr   
  				|	RelationalExprNoBF "<=" ShiftExpr    
  				|	RelationalExprNoBF ">=" ShiftExpr    
  				|	RelationalExprNoBF "instanceof" ShiftExpr
	 			|	RelationalExprNoBF "in" ShiftExpr 
				;

EqualityExpr		:	RelationalExpr
  				|	EqualityExpr "==" RelationalExpr  
  				|	EqualityExpr "!=" RelationalExpr    
  				|	EqualityExpr "===" RelationalExpr 
  				|	EqualityExpr "!==" RelationalExpr
				;

EqualityExprNoIn	:	RelationalExprNoIn
  				|	EqualityExprNoIn "==" RelationalExprNoIn
  				|	EqualityExprNoIn "!=" RelationalExprNoIn
				|	EqualityExprNoIn "===" RelationalExprNoIn
       			|	EqualityExprNoIn "!==" RelationalExprNoIn
				;

EqualityExprNoBF	:    RelationalExprNoBF
  | EqualityExprNoBF "==" RelationalExpr
  | EqualityExprNoBF "!=" RelationalExpr  
  | EqualityExprNoBF "===" RelationalExpr
  | EqualityExprNoBF "!==" RelationalExpr
	;

BitwiseANDExpr:
    EqualityExpr
  | BitwiseANDExpr "&" EqualityExpr     
;

BitwiseANDExprNoIn:
    EqualityExprNoIn
  | BitwiseANDExprNoIn "&" EqualityExprNoIn
;

BitwiseANDExprNoBF:
    EqualityExprNoBF
  | BitwiseANDExprNoBF "&" EqualityExpr 
;

BitwiseXORExpr:
    BitwiseANDExpr
  | BitwiseXORExpr "^" BitwiseANDExpr   
;

BitwiseXORExprNoIn:
    BitwiseANDExprNoIn
  | BitwiseXORExprNoIn "^" BitwiseANDExprNoIn
                                        
;

BitwiseXORExprNoBF:
    BitwiseANDExprNoBF
  | BitwiseXORExprNoBF "^" BitwiseANDExpr
                                        
;

BitwiseORExpr:
    BitwiseXORExpr
  | BitwiseORExpr "|" BitwiseXORExpr    
;

BitwiseORExprNoIn:
    BitwiseXORExprNoIn
  | BitwiseORExprNoIn "|" BitwiseXORExprNoIn
                                        
;

BitwiseORExprNoBF:
    BitwiseXORExprNoBF
  | BitwiseORExprNoBF "|" BitwiseXORExpr
                                        
;

LogicalANDExpr:
    BitwiseORExpr
  | LogicalANDExpr "&&" BitwiseORExpr    
;

LogicalANDExprNoIn:
    BitwiseORExprNoIn
  | LogicalANDExprNoIn "&&" BitwiseORExprNoIn
                                        
;

LogicalANDExprNoBF:
    BitwiseORExprNoBF
  | LogicalANDExprNoBF "&&" BitwiseORExpr
                                        
;

LogicalORExpr:
    LogicalANDExpr
  | LogicalORExpr "||" LogicalANDExpr     
;

LogicalORExprNoIn:
    LogicalANDExprNoIn
  | LogicalORExprNoIn "||" LogicalANDExprNoIn
                                        
;

LogicalORExprNoBF:
    LogicalANDExprNoBF
  | LogicalORExprNoBF "||" LogicalANDExpr 
;

ConditionalExpr:
    LogicalORExpr
  | LogicalORExpr "?" AssignmentExpr ":" AssignmentExpr
                                        
;

ConditionalExprNoIn:
    LogicalORExprNoIn
  | LogicalORExprNoIn "?" AssignmentExprNoIn ":" AssignmentExprNoIn
                                        
;

ConditionalExprNoBF:
    LogicalORExprNoBF
  | LogicalORExprNoBF "?" AssignmentExpr ":" AssignmentExpr
                                        
;

AssignmentExpr:
    ConditionalExpr
  | LeftHandSideExpr AssignmentOperator AssignmentExpr
                                        
;

AssignmentExprNoIn	:	ConditionalExprNoIn
  				|	LeftHandSideExpr AssignmentOperator AssignmentExprNoIn
				;


AssignmentExprNoBF:
    ConditionalExprNoBF
  | LeftHandSideExprNoBF AssignmentOperator AssignmentExpr
	;

AssignmentOperator	:    "="                                
  				|	"+="                          
  				|	"-="
  				|	"*="
  				|	"/="
  				|	"<<="
  				|	">>="
  				| ">>>="
  				| "&="
  				| "^="
  				| "|="
  				| "%="
;

Expr:
    AssignmentExpr
  | Expr "," AssignmentExpr            
;

ExprNoIn:
    AssignmentExprNoIn
  | ExprNoIn "," AssignmentExprNoIn    
;

ExprNoBF:
    AssignmentExprNoBF
  | ExprNoBF "," AssignmentExpr        
;

Statement:
    Block
  | VariableStatement
  | ConstStatement
  | FunctionDeclaration
  | EmptyStatement
  | ExprStatement
  | IfStatement
  | IterationStatement
  | ContinueStatement
  | BreakStatement
  | ReturnStatement
  | WithStatement
  | SwitchStatement
  | LabelledStatement
  | ThrowStatement
  | TryStatement
  | DebuggerStatement
;

Block:
    "{" "}"               
  | "{" SourceElements "}"
;

VariableStatement:
    "var" VariableDeclarationList ";"    
  | "var" VariableDeclarationList error  
;

VariableDeclarationList:
    IDENTIFIER                               
  | IDENTIFIER Initializer                   
  | VariableDeclarationList "," IDENTIFIER
                                        
  | VariableDeclarationList "," IDENTIFIER Initializer
                                        
;

VariableDeclarationListNoIn:
    IDENTIFIER                               
  | IDENTIFIER InitializerNoIn               
  | VariableDeclarationListNoIn "," IDENTIFIER
                                        
  | VariableDeclarationListNoIn "," IDENTIFIER InitializerNoIn
                                        
;

ConstStatement	:    "const" ConstDeclarationList ";" 
  			|	"const" ConstDeclarationList error
			;


ConstDeclarationList	:    ConstDeclaration                    
  				|	ConstDeclarationList "," ConstDeclaration
				;

ConstDeclaration:
    IDENTIFIER                               
  | IDENTIFIER Initializer                   
;

Initializer:
    "=" AssignmentExpr                  
;

InitializerNoIn:
    "=" AssignmentExprNoIn              
;

EmptyStatement:
    ";"                                 
;

ExprStatement:
    ExprNoBF ";"                        
  | ExprNoBF error                      
;

IfStatement	:	"if" "(" Expr ")" Statement %prec IF_WITHOUT_ELSE
  			|	"if" "(" Expr ")" Statement "else" Statement
			;

IterationStatement:
    "do" Statement "while" "(" Expr ")" ";"    
  | "do" Statement "while" "(" Expr ")" error   // Always performs automatic semicolon insertion.
  | "while" "(" Expr ")" Statement        
  | "for" "(" ExprNoInOpt ";" ExprOpt ";" ExprOpt ")" Statement
                                        
  | "for" "(" "var" VariableDeclarationListNoIn ";" ExprOpt ";" ExprOpt ")" Statement
                                        
  | "for" "(" LeftHandSideExpr "in" Expr ")" Statement
                                        
  | "for" "(" "var" IDENTIFIER "in" Expr ")" Statement
                                        
  | "for" "(" "var" IDENTIFIER InitializerNoIn "in" Expr ")" Statement
                                        
;

ExprOpt	:	.
  		|	Expr
		;

ExprNoInOpt	:	.
  			|	ExprNoIn
			;

ContinueStatement:
    "continue" ";"                        
  | "continue" error                      
  | "continue" IDENTIFIER ";"                  
  | "continue" IDENTIFIER error                
;

BreakStatement:
    "break" ";"                           
  | "break" error                         
  | "break" IDENTIFIER ";"                     
  | "break" IDENTIFIER error                   
;

ReturnStatement:
    "return" ";"                          
  | "return" error                        
  | "return" Expr ";"                     
  | "return" Expr error                   
;

WithStatement:
    "with" "(" Expr ")" Statement         
;

SwitchStatement:
    "switch" "(" Expr ")" CaseBlock       
;

CaseBlock:
    "{" CaseClausesOpt "}"              
  | "{" CaseClausesOpt DefaultClause CaseClausesOpt "}"
                                        
;

CaseClausesOpt	:	.                         
  			|	CaseClauses
			;

CaseClauses:
    CaseClause                          
  | CaseClauses CaseClause              
;

CaseClause:
    "case" Expr ":"                       
  | "case" Expr ":" SourceElements        
;

DefaultClause:
    "default" ":"                         
  | "default" ":" SourceElements          
;

LabelledStatement:
    IDENTIFIER ":" Statement                 
;

ThrowStatement:
    "throw" Expr ";"                      
  | "throw" Expr error                    
;

TryStatement:
    "try" Block "finally" Block             
  | "try" Block "catch" "(" IDENTIFIER ")" Block 
  | "try" Block "catch" "(" IDENTIFIER ")" Block "finally" Block
                                        
;

DebuggerStatement:
    "debugger" ";"                        
  | "debugger" error                      
;

FunctionDeclaration:
    "function" IDENTIFIER "(" ")" "{" FunctionBody "}" 
  | "function" IDENTIFIER "(" FormalParameterList ")" "{" FunctionBody "}"
      
;

FunctionExpr:
    "function" "(" ")" "{" FunctionBody "}" 
    | "function" "(" FormalParameterList ")" "{" FunctionBody "}"
      
  | "function" IDENTIFIER "(" ")" "{" FunctionBody "}" 
  | "function" IDENTIFIER "(" FormalParameterList ")" "{" FunctionBody "}"
      
;

FormalParameterList:
    IDENTIFIER                               
  | FormalParameterList "," IDENTIFIER       
;

FunctionBody	:	.
  			|	SourceElements               
			;

Program		:	.
    			|	SourceElements                    
			;

SourceElements:
    Statement                           
  | SourceElements Statement            
;
 






