

%name	delim 		:	"[ \r\n\t]"			
				;
%name	comment		:	"/\*([^\*]|\*+[^\*/])*\*+/"	
				;
%name	comment_line	:	"//[^\n]*\n"			
				;
%name	digit			:	"[0-9]"				
				;
%name	number		:	"{digit}+"				
				;
%name	letter		:	"[A-Z_a-z]"
				;


%name	int_type_suffix	:	"((u|U)?(l|L))|((u|U)(l|L)?)"
				;


%name	octal_escape	:	"(\\[0-3][0-7][0-7])|(\\[0-7][0-7])|(\\[0-7])"
				;


%name hex_digit		:	"[0-9a-fA-F]"
				;

%name hex_literal 	:	"0(x|X){hex_digit}+{int_type_suffix}?"
				;


%name dec_literal	:	"(0|[1-9][0-9]*){int_type_suffix}?"
				;


%name oct_literal	:	"0[0-7]+{int_type_suffix}?"
				;



%name	exponet		:	"(e|E)(\+|\-)?[0-9]+"
				;

%name float_type_suffix	:	"(f|F|d|D)"
					;

%name float_literal	:	"([0-9]*\.[0-9]*{exponet}?{float_type_suffix}?)"
				;




%name skip_lexem	: 	"{delim}|{comment}|{comment_line}"
				;

/*  '"'  == \x22,  '\'' == \x27 */

%name	escape_seq		:	"(\\(b|t|n|f|r|\x22|\x27|\\))|{octal_escape}"
				;

%name	string_literal	: 	"(\x22({escape_seq}|[^\x22\\])*\x22)"
				;

%name	char_literal	:	"\x27({escape_seq}|[^\x27\\])\x27"
				;


%token %skip 	:	"{delim}+|{comment}+|{comment_line}+",1;



%token	CHAR_CONSTANT	:	"{char_literal}";
%token	STRING_LITERAL	:	"{string_literal}";

/*
由于引擎本身的算法原因，必须把相同前缀最长的匹配的优先级提到最高，例如匹配
"=" 和"=="，需要把==的优先级设置到大于"="才可以正常匹配
*/


%token	FLOAT_CONSTANT	:	"{float_literal}(?!{keyword_lhd})"			,2	;
%token	HEX_CONSTANT	:	"{hex_literal}(?!{keyword_lhd})"			,2	;
%token	OCT_CONSTANT	:	"{oct_literal}(?!{keyword_lhd})"			,1	;
%token	DEC_CONSTANT	:	"{dec_literal}(?!{keyword_lhd})"			,1	;




%token	IDENTIFIER		:	"{letter}({letter}|{digit})*";


%name		keyword_lhd	:	"[A-Z_a-z0-9]"
					;




%token	"switch"	:	'"switch"(?!{keyword_lhd})'		,1		;	//SWITCH
%token	"for"		:	'"for"(?!{keyword_lhd})'	,1		;	//FOR
%token	"goto"	:	'"goto"(?!{keyword_lhd})'	,1		;	//GOTO
%token	"return"	:	'"return"(?!{keyword_lhd})'		,1		;	//RETURN
%token	"do"		:	'"do"(?!{keyword_lhd})'		,1		;	//DO
%token	"while"	:	'"while"(?!{keyword_lhd})'	,1		;	//WHILE
%token	"if"		:	'"if"(?!{keyword_lhd})'		,1		;	//IF
%token	"else"	:	'"else"(?!{keyword_lhd})'	,1		;	//ELSE


%token	"continue"	:	'"continue"(?!{keyword_lhd})'	,1		;	//CONTINUE
%token	"default"	:	'"default"(?!{keyword_lhd})'	,1		;	//DEFAULT
%token	"case"	:	'"case"(?!{keyword_lhd})'	,1		;	//CASE
%token	"break"	:	'"break"(?!{keyword_lhd})'	,1		;	//BREAK


%token	"const"	:	'"const"(?!{keyword_lhd})'	,1		;	//CONST
%token	"sizeof"	:	'"sizeof"(?!{keyword_lhd})'		,1		;	//SIZEOF



%token	"struct"	:	'"struct"(?!{keyword_lhd})'		,1		;	//STRUCT
%token	"typedef"	:	'"typedef"(?!{keyword_lhd})'	,1		;	//TYPEDEF


%token	"void"	:	'"void"(?!{keyword_lhd})'		,1		;	//VOID


%token	"byte"	:	'"byte"(?!{keyword_lhd})'	,1		;	//BYTE	sizeof(byte) == 1
%token	"char"	:	'"char"(?!{keyword_lhd})'	,1		;	//CHAR	sizeof(char) == 2
%token	"short"	:	'"short"(?!{keyword_lhd})'	,1	;	//SHORT	sizeof(short) == 3
%token	"int"		:	'"int"(?!{keyword_lhd})'	,1		;	//INT		sizeof(int)	== 4
%token	"long"	:	'"long"(?!{keyword_lhd})'	,1	;	//LONG	sizeof(long)	== 8
%token	"signed"	:	'"signed"(?!{keyword_lhd})'	,1	;	//SIGNED	sizeof(signed)	== sizeof(int)
%token	"unsigned"	:	'"unsigned"(?!{keyword_lhd})'	,1	;	//UNSIGNED	sizeof(signed)	== sizeof(int)


%token	"float"	:	'"float"(?!{keyword_lhd})'	,1		;	//FLOAT	sizeof(float)	== 4
%token	"double"	:	'"double"(?!{keyword_lhd})'	,1	;	//DOUBLE	sizeof(double) == 8


%token	"__attribute__" :	'"__attribute__"'				,1	;
%token	"__pack__" :	'"__pack__"'				,1	;

%token	">>="		:	'">>="'		,2		;	//RIGHT_ASSIGN
%token	"<<="		:	'"<<="'		,2		;	//LEFT_ASSIGN



%token	"+="		:	'"+="'		,1		;	//ADD_ASSIGN
%token	"-="		:	'"-="'		,1		;	//SUB_ASSIGN
%token	"*="		:	'"*="'		,1		;	//MUL_ASSIGN
%token	"/="		:	'"/="'		,1		;	//DIV_ASSIGN
%token	"%="		:	'"%="'		,1		;	//MOD_ASSIGN
%token	"&="		:	'"&="'		,1		;	//AND_ASSIGN


%token	"^="		:	'"^="'		,1		;	//XOR_ASSIGN
%token	"|="		:	'"|="'		,1		;	//OR_ASSIGN
%token	">>"		:	'">>"'		,1		;	//RIGHT_OP
%token	"<<"		:	'"<<"'		,1		;	//LEFT_OP
%token	"++"		:	'"++"'		,1		;	//INC_OP
%token	"--"		:	'"--"'		,1		;	//DEC_OP


%token	"->"		:	'"->"'		,1		;	//PTR_OP
%token	"&&"		:	'"&&"'		,1		;	//AND_OP
%token	"||"		:	'"||"'		,1		;	//OR_OP

%token	"<="		:	'"<="'		,1		;	//LE_OP
%token	">="		:	'">="'		,1		;	//GE_OP
%token	"=="		:	'"=="'		,1		;	//EQ_OP
%token	"!="		:	'"!="'		,1		;	//NE_OP

%token	";"		:	'";"'			,0		;	//;
%token	"{"		:	'"{"'			,0		;	//{
%token	"}"		:	'"}"'			,0		;	//}
%token	","		:	'","'			,0		;	//,
%token	":"		:	'":"'			,0		;	//:
%token	"="		:	'"="'			,0		;	//=
%token	"("		:	'"("'			,0		;	//(
%token	")"		:	'")"'			,0		;	//)
%token	"["		:	'"["'			,0		;	//[
%token	"]"		:	'"]"'			,0		;	//]
%token	"."		:	'"."'			,0		;	//.
%token	"&"		:	'"&"'			,0		;	//&
%token	"!"		:	'"!"'			,0		;	//!
%token	"~"		:	'"~"'			,0		;	//~
%token	"-"		:	'"-"'			,0		;	//-
%token	"+"		:	'"+"'			,0		;	//+
%token	"*"		:	'"*"'			,0		;	//*
%token	"/"		:	'"/"'			,0		;	///
%token	"%"		:	'"%"'			,0		;	//%
%token	"<"		:	'"<"'			,0		;	//<
%token	">"		:	'">"'			,0		;	//>
%token	"^"		:	'"^"'			,0		;	//^
%token	"|"		:	'"|"'			,0		;	//|
%token	"?"		:	'"?"'			,0		;	//?

%token	TYPE_ID	:	'^'			,0		;	//占位符
%token	FAKE_EOI	:	'$'			,0		;	//占位符





%left		"||"				;
%left		"&&"				;
%left		"|"				;
%left		"^"				;
%left		"&"				;
%left		"=="	"!="			;
%left		"<"	"<="	">"	">="	;
%left		"<<"	">>"			;
%left		"+"	"-"			;
%left		"*"	"/"	"%"		;

%nonassoc	IF_STMT_PREC						;
%nonassoc	IF_STMT_ELSE_STMT_PREC				;
%nonassoc	SPEC_ACTION						;
%right	ERROR_SHIFT						;



%start	translation_unit;


/****************************************特殊动作钩子**********************************************/

enter_scope			:	.	%prec SPEC_ACTION
					;

exit_scope				:	.	%prec SPEC_ACTION	
					;

init_func_def			:	.	%prec SPEC_ACTION	
					;

uninit_func_def			:	.	%prec SPEC_ACTION	
					;


/**************************************************************************************/

/*编译单元*/
translation_unit	:	external_declaration
				|	translation_unit external_declaration
				;

/*函数定义或声明*/
external_declaration		:	function_definition
					|	declaration
					;


function_definition		:	declaration_specifiers declarator init_func_def compound_statement uninit_func_def
					;






/****************************************类型********************************************/



type_qualifier			:	"const"
					;


type_specifier			:	"void"
					|	"byte"
					|	"char"
					|	"short"
					|	"int"
					|	"long"
					|	"float"
					|	"double"
					|	"signed"
					|	"unsigned"
					|	"signed"		"short"
					|	"unsigned"		"short"
					|	"signed"		"int"
					|	"unsigned"		"int"
					|	"signed"		"long"
					|	"unsigned"		"long"
					|	struct_specifier
					|	TYPE_ID
					;


/*结构声明*/

struct_specifier		:	"struct" IDENTIFIER "{" enter_scope struct_declaration_list  exit_scope "}"
					|	"struct" IDENTIFIER
					|	"struct" IDENTIFIER "{" enter_scope error  exit_scope "}"
					|	"struct" error 
					;


struct_declaration		:	type_specifier  struct_declarator_list ";"
					;



struct_declaration_list	:	struct_declaration
					|	struct_declaration_list struct_declaration
					;

struct_declarator_list	:	declarator 
					|	struct_declarator_list "," declarator 
					;




/*************************************声明***************************************************/

set_pack				:	"__pack__"		"(" ")"
					|	"__pack__"		"(" DEC_CONSTANT ")"
					|	"__pack__" 	error 
					;	

declaration			:	declaration_specifiers init_declarator_list ";"
					|	declaration_specifiers ";"
					|	declaration_specifiers error
					|	set_pack
					;


declaration_specifiers	:	"typedef"	type_qualifier	type_specifier
					|	"typedef"	type_specifier
					|	type_qualifier	type_specifier	
					|	type_specifier
					;



declaration_list		:	declaration
					|	declaration_list declaration
					;




init_declarator_list		:	init_declarator
					|	init_declarator_list "," init_declarator
					;


init_declarator			:	declarator
					|	declarator "=" initializer
					;




initializer			:	assignment_expression
					|	"{" initializer_list "}"
					;


initializer_list		:	initializer
					|	initializer_list "," initializer
					;







declarator				:	pointer direct_declarator
					|	direct_declarator
					;


direct_declarator		:	IDENTIFIER
					|	IDENTIFIER	"[" constant_expression "]"	/*数组声明*/
					|	IDENTIFIER	"[" "]"					/*数组声明*/
					|	IDENTIFIER	"(" parameter_list ")"		/*带参数的函数声明*/
					|	IDENTIFIER	"(" ")"					/*不带参数的函数声明*/
					;



pointer				:	"*"
					|	"*" type_qualifier
					|	"*" type_qualifier	pointer
					|	"*" pointer
					;




parameter_list			:	parameter_declaration
					|	parameter_list "," parameter_declaration
					;



parameter_declaration		:	declaration_specifiers declarator
					|	declaration_specifiers pointer
					|	declaration_specifiers
					;




type_name				:	specifier_qualifier_list
					|	specifier_qualifier_list pointer
					;

specifier_qualifier_list	:	type_qualifier	type_specifier
					|	type_specifier
					;












/*************************************语句***************************************************/


statement				:	labeled_statement
					|	compound_statement
					|	expression_statement
					|	selection_statement
					|	iteration_statement
					|	jump_statement
					;

labeled_statement		:	"case" constant_expression ":" statement
					|	"default" ":" statement
					|	IDENTIFIER ":" statement	
					;




compound_statement		:	"{" "}"
					|	"{" statement_list "}"
					|	"{" enter_scope	declaration_list exit_scope	"}"
					|	"{" enter_scope	declaration_list statement_list exit_scope	"}"

					|	"{" enter_scope	declaration_list error exit_scope	"}"	
					|	"{" error "}"	%prec ERROR_SHIFT

					;


statement_list			:	statement
					|	statement_list statement
					;

expression_statement		:	";"
					|	expression ";"
					;

selection_statement		:	"if" "(" expression ")" statement	%prec IF_STMT_PREC
					|	"if" "(" expression ")" statement "else" statement	%prec IF_STMT_ELSE_STMT_PREC
					|	"switch" "(" expression ")" statement
					;

iteration_statement		:	"while" "(" expression ")" statement
					|	"do" statement "while" "(" expression ")" ";"
					|	"for" "(" expression_statement expression_statement ")" statement
					|	"for" "(" expression_statement expression_statement expression ")" statement
					;

jump_statement			:	"goto" IDENTIFIER ";"
					|	"continue" ";"
					|	"break" ";"
					|	"return" ";"
					|	"return" expression ";"
					;





/*****************************************表达式*********************************************/



expression				:	assignment_expression
					|	expression "," assignment_expression
					;


primary_expression	:	IDENTIFIER
				|	constant
				|	"(" expression ")"
				;

postfix_expression	:	primary_expression
				|	postfix_expression "[" expression "]"
				|	postfix_expression "(" ")"
				|	postfix_expression "(" argument_expression_list ")"
				|	postfix_expression "." IDENTIFIER
				|	postfix_expression "->" IDENTIFIER
				|	postfix_expression "++"
				|	postfix_expression "--"
				;

argument_expression_list	:	assignment_expression
					|	argument_expression_list "," assignment_expression
					;

unary_expression	:	postfix_expression
				|	"++" unary_expression
				|	"--" unary_expression
				|	unary_operator cast_expression
				|	"sizeof"  unary_expression 
				|	"sizeof" "(" type_name ")"
				;

unary_operator		:	"&"
				|	"*"
				|	"+"
				|	"-"
				|	"~"
				|	"!"
				;

cast_expression		:	unary_expression
				|	"(" type_name ")" cast_expression
				;


binary_expression	:	binary_expression	"+"	binary_expression
				|	binary_expression	"-"	binary_expression
				|	binary_expression	"*"	binary_expression
				|	binary_expression	"/"	binary_expression
				|	binary_expression	"%"	binary_expression
				|	binary_expression	"<<"	binary_expression
				|	binary_expression	">>"	binary_expression
				|	binary_expression	"<"	binary_expression
				|	binary_expression	"<="	binary_expression
				|	binary_expression	">"	binary_expression
				|	binary_expression	">="	binary_expression
				|	binary_expression	"=="	binary_expression
				|	binary_expression	"!="	binary_expression
				|	binary_expression	"&"	binary_expression
				|	binary_expression	"^"	binary_expression
				|	binary_expression	"|"	binary_expression
				|	binary_expression	"&&"	binary_expression
				|	binary_expression	"||"	binary_expression
				|	cast_expression
				;



constant_expression		:	binary_expression
					|	binary_expression	"?"	expression	":"	constant_expression
					;

assignment_expression		:	constant_expression
					|	unary_expression assignment_operator assignment_expression
					;

assignment_operator		:	"="
					|	"*="
					|	"/="
					|	"%="
					|	"+="
					|	"-="
					|	"<<="
					|	">>="
					|	"&="
					|	"^="
					|	"|="
					;



/****************************************常量**********************************************/

constant			:	OCT_CONSTANT
				|	HEX_CONSTANT
				|	DEC_CONSTANT
				|	FLOAT_CONSTANT
				|	CHAR_CONSTANT
				|	STRING_LITERAL
				;


/**************************************************************************************/







































/*
丢弃的终结符
%token	"union"	:	'"union"(?!{keyword_lhd})'		,1		;	//UNION
%token	"enum"	:	'"enum"(?!{keyword_lhd})'	,1		;	//ENUM					;
%token	"..."		:	'"..."'		,1		;	//ELLIPSIS
%token	"__attribute__" :	'"__attribute__"'				,1	;
%token	"register"	:	'"register"(?!{keyword_lhd})'	,1		;	//REGISTER
%token	"static"	:	'"static"(?!{keyword_lhd})'		,1		;	//STATIC
%token	"auto"	:	'"auto"(?!{keyword_lhd})'	,1		;		//AUTO
%token	"extern"	:	'"extern"(?!{keyword_lhd})'	,1		;	//EXTERN

%token	"volatile"	:	'"volatile"(?!{keyword_lhd})'	,1		;	//VOLATILE


*/


