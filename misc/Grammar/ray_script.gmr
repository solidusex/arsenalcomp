
%name	delim 		:	"[ \r\n\t]"			
				;
%name	comment		:	"/\*([^\*]|\*+[^\*/])*\*+/"	
				;
%name	comment_line	:	"//[^\n]*\n"			
				;
%name skip_lexem	: 	"{delim}|{comment}|{comment_line}"
				;




%name	digit			:	"[0-9]"				
				;
%name	number		:	"{digit}+"				
				;
%name	letter		:	"[A-Z_a-z]"
				;



%name hex_digit		:	"[0-9a-fA-F]"
				;

%name hex_literal 	:	"0(x|X){hex_digit}+"
				;

%name oct_literal	:	"0[0-7]+"
				;

%name dec_literal	:	"(0|[1-9][0-9]*)"
				;




%name	exponet			:	"(e|E)(\+|\-)?[0-9]+"
					;


%name float_literal		:	"(((([0-9]\.[0-9]*)|(\.[0-9]+)){exponet}?)|([0-9]+{exponet}))"
					;






/*  '"'  == \x22,  '\'' == \x27 */

%name	escape_seq		:	"(\\(\x22|\x27))"	
				;

%name	string_dq		: 	"(\x22({escape_seq}|[^\x22])*\x22)"		//只能提取"..."或"\""此类串，其它C规则要到语义例程中处理	
				;

%name	string_sq		:	"\x27({escape_seq}|[^\x27])*\x27"		//提取'...'或'\''此类串，其它C规则要到语义例程中处理	
				;



%name	keyword_lhd	:	"[A-Z_a-z0-9]"
				;


%name		float_constant	:	"{float_literal}(?!{keyword_lhd})"
					;
%name		hex_constant	:	"{hex_literal}(?!{keyword_lhd})"
					;
%name		oct_constant	:	"{oct_literal}(?!{keyword_lhd})"
					;
%name		dec_constant	:	"{dec_literal}(?!{keyword_lhd})"
					;


%token 	%skip			:	"{skip_lexem}+"				,1		%action	"TOK_DELIM_ID"	;//空白，需要过滤




%token	NAME			:	"{letter}({letter}|{digit})*"					%action "TOK_NAME"		;


%token	STRING		:	"{string_dq}|{string_sq}"						%action "TOK_STRING"					;
%token	FLOAT_NUMBER	:	"{float_constant}"						,2	%action "TOK_FLOAT_NUMBER"				;
%token	INT_NUMBER		:	"{hex_constant}|{oct_constant}|{dec_constant}"	,2	%action "TOK_INT_NUMBER"				;









%token	"for"		:	'"for"(?!{keyword_lhd})'		,1					%action	"TOK_FOR"			;
%token	"do"		:	'"do"(?!{keyword_lhd})'		,1					%action	"TOK_DO"			;
%token	"while"	:	'"while"(?!{keyword_lhd})'		,1					%action	"TOK_WHILE"		;
%token	"if"		:	'"if"(?!{keyword_lhd})'		,1					%action	"TOK_IF"			;
%token	"else"	:	'"else"(?!{keyword_lhd})'		,1					%action	"TOK_ELSE"			;

%token	"continue"	:	'"continue"(?!{keyword_lhd})'	,1					%action	"TOK_CONTINUE"		;
%token	"break"	:	'"break"(?!{keyword_lhd})'		,1					%action	"TOK_BREAK"		;
%token	"return"	:	'"return"(?!{keyword_lhd})'	,1					%action	"TOK_RETURN"		;

%token	"function"	:	'"function"(?!{keyword_lhd})'	,1					%action	"TOK_FUNCTION"		;
%token	"nil"		:	'"nil"(?!{keyword_lhd})'		,1					%action	"TOK_NIL"			;


%token	"..."		:	'"..."'		,2								%action 	"TOK_ELLIPSIS"		;	


%token	"++"		:	'"++"'		,1								%action	"TOK_INC"			;
%token	"--"		:	'"--"'		,1								%action	"TOK_DEC"			;

%token	"&&"		:	'"&&"'		,1								%action	"TOK_ANDAND"	;
%token	"||"		:	'"||"'		,1								%action	"TOK_OROR"		;

%token	"<="		:	'"<="'		,1								%action 	"TOK_LE"		;
%token	">="		:	'">="'		,1								%action 	"TOK_GE"		;
%token	"=="		:	'"=="'		,1								%action 	"TOK_EQ"		;
%token	"!="		:	'"!="'		,1								%action	"TOK_NE"		;
%token	"<"		:	'"<"'			,0								%action	"TOK_LESS"		;
%token	">"		:	'">"'			,0								%action	"TOK_GREATER"	;




%token	"{"		:	'"{"'			,0								%action "TOK_L_BRACES"		;
%token	"}"		:	'"}"'			,0								%action "TOK_R_BRACES"		;
%token	"("		:	'"("'			,0								%action "TOK_L_PAREN"			;
%token	")"		:	'")"'			,0								%action "TOK_R_PAREN"			;
%token	"["		:	'"["'			,0								%action "TOK_L_SQUARE"		;
%token	"]"		:	'"]"'			,0								%action "TOK_R_SQUARE"		;

%token	";"		:	'";"'			,0								%action "TOK_SEMICOLON"			;
%token	","		:	'","'			,0								%action "TOK_COMMA"				;
%token	"="		:	'"="'			,0								%action "TOK_ASSIGN"				;



%token	"+"		:	'"+"'			,0								%action "TOK_ADD"				;
%token	"-"		:	'"-"'			,0								%action "TOK_SUB"				;
%token	"*"		:	'"*"'			,0								%action "TOK_MUL"				;
%token	"/"		:	'"/"'			,0								%action "TOK_DIV"				;
%token	"%"		:	'"%"'			,0								%action "TOK_MOD"				;

%token	"!"		:	'"!"'			,0								%action "TOK_NOT"				;

%token	"."		:	'"."'			,0								%action "TOK_DOT"				;











%left		"||"								;
%left		"&&"								;
%left		"=="	"!="	"<"	"<="	">"	">="			;
%left		"+"	"-"							;
%left		"*"	"/"	"%"						;


/*
"if" "(" expression ")" statement "else" statement 
产生式的优先级依赖于其最右终结符或显性指定,这里就是"else"
*/
%nonassoc IF_WITHOUT_ELSE						;
%nonassoc "else"							;


/**************************************************************************************/
%start 				program				;



program			:	translation_unit
				;

translation_unit	:	element
				|	translation_unit	element
				;



element				:	function_definition
					|	assignment_statement
					|	call_statement
					;

function_definition		:	"function"	 dotname	  "(" params ")" compound_statement
					;

dotname				:	NAME
					|	dotname "." NAME
					;

namelist				:	namelist	"," NAME
					|	NAME
					;


params				:	.
					|	namelist
					|	"..."
					|	namelist	","	"..."
					;



/***************************************语句***************************************************/



statement				:	compound_statement
					|	selection_statement	
					|	iteration_statement	
					|	jump_statement	
					|	assignment_statement
					|	call_statement
					|	empty_statement
					;

statement_list			:	statement
					|	statement_list statement
					;


call_statement			:	call_expression	semi
					;


assignment_statement		:	var	"="	expression	semi
					;


empty_statement			:	semi
					;





for_expression_list	:	expression ";" expression 
				|	expression ";" expression ";" expression 
				|	NAME "=" expression ";" expression ";" expression 
				;



selection_statement		:	"if" "(" expression ")" statement				%prec IF_WITHOUT_ELSE
					|	"if" "(" expression ")" statement "else" statement	
					;

iteration_statement		:	"while" "(" expression ")" statement
					|	"do" statement "while" "(" expression ")" 	semi
					|	"for" "(" for_expression_list ")" statement
					;


jump_statement			:	"continue" 		semi
					|	"break" 			semi
					|	"return" 			semi
					|	"return" expression 	semi
					;


compound_statement		:	"{"	statement_list	"}"
					|	"{"	"}"
					;





semi					:	";"
					|	error
					;




/*****************************************表达式*********************************************/


expression				:	FLOAT_NUMBER
					|	INT_NUMBER
					|	STRING
					|	"nil"
					|	"{"	expression_list "}"
					|	postfix_expression 
					|	"++" expression		
					|	"--" expression		
					|	"!"	expression
					|	"+"	expression		%prec	"!"
					|	"-"	expression		%prec	"!"
					|	expression	"+"	expression
					|	expression	"-"	expression
					|	expression	"*"	expression
					|	expression	"/"	expression
					|	expression	"%"	expression
					|	expression	"<"	expression
					|	expression	"<="	expression
					|	expression	">"	expression
					|	expression	">="	expression
					|	expression	"=="	expression
					|	expression	"!="	expression
					|	expression	"&&"	expression
					|	expression	"||"	expression
					;


expression_list			:	expression	
					|	expression_list	","	expression	
					;

postfix_expression 		:	"(" expression ")"
					|	var
					|	postfix_expression "++"						
					|	postfix_expression "--"		
					|	call_expression
					;



var					:	NAME
					|	postfix_expression "["	expression  "]"
					|	postfix_expression "."	NAME
					;


call_expression			:	postfix_expression "(" ")"						
					|	postfix_expression "(" expression_list ")"	
					;









