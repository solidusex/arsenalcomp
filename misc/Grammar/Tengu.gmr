

/******************************************PreDefined code********************************************/

{
/*
 * The Arsenal Library
 * Copyright (c) 2009 by Solidus
 * 
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.It is provided "as is" without express 
 * or implied warranty.
 *
 */


};



















%name	delim 		:	"[ \r\n\t]"			
				;
%name	comment		:	"/\*([^\*]|\*+[^\*/])*\*+/"	
				;

%name	comment_line	:	"(//[^\r\n]*\r?(\n|$))"
				;

%name skip_lexem	: 	"{comment_line}|{delim}|{comment}"
				;


%name	digit			:	"[0-9]"				
				;
%name	number		:	"{digit}+"				
				;
%name	letter		:	"[A-Z_a-z]"
				;



%name hex_digit		:	"[0-9a-fA-F]"
				;

%name hex_literal 	:	"0(x|X){hex_digit}+"
				;

%name oct_literal	:	"0[0-7]+"
				;

%name dec_literal	:	"(0|[1-9][0-9]*)"
				;




%name	exponet			:	"(e|E)(\+|\-)?[0-9]+"
					;


%name float_literal		:	"(((([0-9]\.[0-9]*)|(\.[0-9]+)){exponet}?)|([0-9]+{exponet}))"
					;






/*  '"'  == \x22,  '\'' == \x27 */

%name	escape_seq		:	"(\\(\x22|\x27))"	
				;

%name	string_dq		: 	"(\x22({escape_seq}|[^\x22])*\x22)"		//只能提取"..."或"\""此类串，其它词法规则要到语义例程中处理	
				;

%name	string_sq		:	"\x27({escape_seq}|[^\x27])*\x27"		//提取'...'或'\''此类串，其它词法规则要到语义例程中处理	
				;



%name	keyword_lhd	:	"[A-Z_a-z0-9]"
				;


%name		float_constant	:	"{float_literal}(?!{keyword_lhd})"
					;
%name		hex_constant	:	"{hex_literal}(?!{keyword_lhd})"
					;
%name		oct_constant	:	"{oct_literal}(?!{keyword_lhd})"
					;
%name		dec_constant	:	"{dec_literal}(?!{keyword_lhd})"
					;


%token 	%skip			:	"{skip_lexem}"				,1				%action	"TOK_DELIM_ID"	;//空白，需要过滤




%token	NAME			:	"{letter}({letter}|{digit})*"					%action "TOK_NAME"					;


%token	STRING		:	"{string_dq}|{string_sq}"						%action "TOK_STRING"					;
%token	FLOAT_NUMBER	:	"{float_constant}"						,2	%action "TOK_FLOAT_NUMBER"				;
%token	INT_NUMBER		:	"{hex_constant}|{oct_constant}|{dec_constant}"	,2	%action "TOK_INT_NUMBER"				;









%token	"do"		:	'"do"(?!{keyword_lhd})'		,1					%action	"TOK_DO"			;
%token	"while"	:	'"while"(?!{keyword_lhd})'		,1					%action	"TOK_WHILE"		;
%token	"if"		:	'"if"(?!{keyword_lhd})'		,1					%action	"TOK_IF"			;
%token	"else"	:	'"else"(?!{keyword_lhd})'		,1					%action	"TOK_ELSE"			;

%token	"continue"	:	'"continue"(?!{keyword_lhd})'	,1					%action	"TOK_CONTINUE"		;
%token	"break"	:	'"break"(?!{keyword_lhd})'		,1					%action	"TOK_BREAK"		;
%token	"return"	:	'"return"(?!{keyword_lhd})'	,1					%action	"TOK_RETURN"		;

%token	"null"	:	'"null"(?!{keyword_lhd})'		,1					%action	"TOK_NULL"			;
%token	"true"	:	'"true"(?!{keyword_lhd})'		,1					%action	"TOK_TRUE"			;
%token	"false"	:	'"false"(?!{keyword_lhd})'		,1					%action	"TOK_FALSE"		;
%token	"var"		:	'"var"(?!{keyword_lhd})'		,1					%action	"TOK_VAR"			;


%token	"..."		:	'"..."'		,2								%action 	"TOK_ELLIPSIS"		;	


%token	"++"		:	'"++"'		,1								%action	"TOK_INC"	;
%token	"--"		:	'"--"'		,1								%action	"TOK_DEC"		;


%token	"&&"		:	'"&&"'		,1								%action	"TOK_ANDAND"	;
%token	"||"		:	'"||"'		,1								%action	"TOK_OROR"		;



%token	"<="		:	'"<="'		,1								%action 	"TOK_LE"		;
%token	">="		:	'">="'		,1								%action 	"TOK_GE"		;
%token	"=="		:	'"=="'		,1								%action 	"TOK_EQ"		;
%token	"!="		:	'"!="'		,1								%action	"TOK_NE"		;
%token	"<"		:	'"<"'			,0								%action	"TOK_LESS"		;
%token	">"		:	'">"'			,0								%action	"TOK_GREATER"	;




%token	"{"		:	'"{"'			,0								%action "TOK_L_BRACES"		;
%token	"}"		:	'"}"'			,0								%action "TOK_R_BRACES"		;
%token	"("		:	'"("'			,0								%action "TOK_L_PAREN"			;
%token	")"		:	'")"'			,0								%action "TOK_R_PAREN"			;
%token	"["		:	'"["'			,0								%action "TOK_L_SQUARE"		;
%token	"]"		:	'"]"'			,0								%action "TOK_R_SQUARE"		;

%token	";"		:	'";"'			,0								%action "TOK_SEMICOLON"			;
%token	","		:	'","'			,0								%action "TOK_COMMA"				;
%token	"="		:	'"="'			,0								%action "TOK_ASSIGN"				;



%token	"+"		:	'"+"'			,0								%action "TOK_ADD"				;
%token	"-"		:	'"-"'			,0								%action "TOK_SUB"				;
%token	"*"		:	'"*"'			,0								%action "TOK_MUL"				;
%token	"/"		:	'"/"'			,0								%action "TOK_DIV"				;
%token	"%"		:	'"%"'			,0								%action "TOK_MOD"				;

%token	"!"		:	'"!"'			,0								%action "TOK_NOT"				;


%token	":"		:	'":"'			,0								%action "TOK_COLON"				;
%token	"?"		:	'"?"'			,0								%action "TOK_QUEST"				;

/*
%token	"."		:	'"."'			,0								%action "TOK_DOT"				;
*/


%right	"?"	":"							;
%left		"||"								;
%left		"&&"								;
%left		"=="	"!="	"<"	"<="	">"	">="			;
%left		"+"	"-"							;
%left		"*"	"/"	"%"						;




/*
"if" "(" expression ")" statement "else" statement 
产生式的优先级依赖于其最右终结符或显性指定,这里就是"else"
*/
%nonassoc IF_WITHOUT_ELSE						;
%nonassoc "else"							;



/**************************************************************************************/
%start	program	;


program			:	translation_unit
				|	.
				;

translation_unit	:	element
				|	translation_unit	element
				;



element			:	declaration
				|	function_defination
				;


/**************************************function_defination***********************************************/

function_defination		:	"var"		NAME "(" params ")"	compound_statement
					;


params				:	namelist	","	"..."
					|	namelist
					|	"..."
					|	.
					;



namelist				:	namelist	"," NAME
					|	NAME
					;








/*************************************语句***************************************************/


statement				:	compound_statement	
					|	expression_statement	
					|	selection_statement	
					|	iteration_statement	
					|	jump_statement
					;



/*************************************声明语句***************************************************/

declaration			:	"var"		init_declarator_list 	semi
					;



init_declarator_list		:	init_declarator
					|	init_declarator_list "," init_declarator
					;


init_declarator			:	NAME	"=" 	expression
					|	NAME "="	table_constructor
					|	NAME
					;


table_constructor		:	"{"	filed_list "}"
					|	"{"	"}"
					;

filed_list 			:	filed 
					|	filed_list "," filed
					;


filed					:	expression
					|	table_constructor
					;


/**************************************compound_statement*****************************/

compound_statement		:	start_block	compound_element_list		close_block
					|	"{" "}"
					;

compound_element_list		:	compound_element_list		compound_element
					|	compound_element
					;

compound_element		:	statement
					|	declaration
					;

start_block			:	"{"
					;

close_block			:	"}"	
					;



/*****************************************************************************/


expression_statement		:	expression	 semi		%action auto_return_0
					{
						psrNode_t *ret = nodes[0];
						tguParser_t	*parser = (tguParser_t*)ctx;
						nodes[0] = NULL;
						if(ret == NULL)
						\{
							parser->has_error = true;
						\}
						return ret;
					}

					|	semi				%action auto_return_null
					{
						return NULL;
					}
					;

if_statement			:	"if" "(" expression ")" statement			%prec IF_WITHOUT_ELSE		%action on_if_statement
					|	"if" "(" error ")" statement				%prec IF_WITHOUT_ELSE		%action on_if_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*if_true;
						AR_ASSERT(ns != NULL && count == 5);
						if(ns[2] == NULL)
						\{
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[2]->expr;
							ns[2]->expr = NULL;
						\}
							
						if(ns[4] == NULL)
						\{	
							if_true = NULL;
							parser->has_error = true;
						\}else
						\{
							if_true = ns[4]->stmt;
							ns[4]->stmt = NULL;
						\}

						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						ret->stmt = AR_NEW0(tguStmt_t);								
						ret->stmt->stmt_type = TGU_STT_IF;
						ret->stmt->lex_info = ns[0]->token->lex_info;
						ret->stmt->expr = expr;
						ret->stmt->if_stmt.true_part = if_true;
						ret->stmt->if_stmt.false_part = NULL;
						return ret;
					}
					;

if_else_statement		:	"if" "(" expression ")" statement "else" statement	%action on_if_else_statement
					|	"if" "(" error ")" statement "else" statement		%action on_if_else_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*if_true;
						tguStmt_t		*if_false;
						AR_ASSERT(ns != NULL && count == 5);
						if(ns[2] == NULL)
						\{
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[2]->expr;
							ns[2]->expr = NULL;
						\}
							
						if(ns[4] == NULL)
						\{	
							if_true = NULL;
							parser->has_error = true;
						\}else
						\{
							if_true = ns[4]->stmt;
							ns[4]->stmt = NULL;
						\}

						if(ns[6] == NULL)
						\{	
							if_false = NULL;
							parser->has_error = true;
						\}else
						\{
							if_false = ns[6]->stmt;
							ns[6]->stmt = NULL;
						\}


						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						ret->stmt = AR_NEW0(tguStmt_t);								
						ret->stmt->stmt_type = TGU_STT_IF;
						ret->stmt->lex_info = ns[0]->token->lex_info;
						ret->stmt->expr = expr;
						ret->stmt->if_stmt.true_part = if_true;
						ret->stmt->if_stmt.false_part = if_false;
						return ret;
					}
					;

selection_statement		:	if_statement		%action auto_return_0
					|	if_else_statement	%action auto_return_0
					;

while_statement			:	"while" enter_loop  "(" expression ")" statement leave_loop	%action	on_while_statement
					|	"while" enter_loop  "(" error ")" statement leave_loop		%action	on_while_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*stmt;
						AR_ASSERT(ns != NULL && count == 5);
						if(ns[3] == NULL)
						\{
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[3]->expr;
							ns[3]->expr = NULL;
						\}
							
						if(ns[5] == NULL)
						\{	
							stmt = NULL;
							parser->has_error = true;
						\}else
						\{
							stmt = ns[5]->stmt;
							ns[5]->stmt = NULL;
						\}

						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						ret->stmt = AR_NEW0(tguStmt_t);								
						ret->stmt->stmt_type = TGU_STT_WHILE;
						ret->stmt->lex_info = ns[0]->token->lex_info;
						ret->stmt->while_stmt.expr = expr;
						ret->stmt->while_stmt.loop_part = stmt;
						return ret;
					}
					;

do_while_statement		:	"do" enter_loop statement "while" "(" expression ")" leave_loop semi			%action	on_do_while_statement
					|	"do" enter_loop statement "while" "(" error ")" leave_loop semi				%action	on_do_while_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*stmt;
						AR_ASSERT(ns != NULL && count == 5);
						if(ns[2] == NULL)
						\{
							stmt = NULL;
							parser->has_error = true;
						\}else
						\{
							stmt = ns[2]->stmt;
							ns[2]->stmt = NULL;
						\}
							
						if(ns[5] == NULL)
						\{	
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[5]->expr;
							ns[5]->expr = NULL;
						\}

						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						ret->stmt = AR_NEW0(tguStmt_t);								
						ret->stmt->stmt_type = TGU_STT_DO;
						ret->stmt->lex_info = ns[0]->token->lex_info;
						ret->stmt->while_stmt.expr = expr;
						ret->stmt->while_stmt.loop_part = stmt;
						return ret;
					}

					;

iteration_statement		:	while_statement			%action	auto_return_0
					|	do_while_statement		%action	auto_return_0
					;

enter_loop				:	.					%action on_enter_loop
					{
						tguParser_t	*parser = NULL;
						AR_ASSERT(ctx != NULL);
						parser = (tguParser_t*)ctx;
						parser->loop_level++;
						return NULL;
					}
					;


leave_loop				:	.					%action on_leave_loop
					{
						tguParser_t	*parser = NULL;
						AR_ASSERT(ctx != NULL);
						parser = (tguParser_t*)ctx;
						AR_ASSERT(parser->loop_level > 0);
						parser->loop_level--;
						return NULL;
					}
					;



jump_statement			:	"continue" semi				%action on_continue_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						AR_ASSERT(ns != NULL);
						if(parser->loop_level == 0)
						\{
							tguReportInfo_t	info;
							info.type = TGU_REPORT_ERROR_SYNTAX_T;
							info.syntax_error.tok = ns[0]->token;
							info.syntax_error.msg = L"illegal continue";
							AR_ASSERT(parser->report.report_func != NULL);
							parser->report.report_func(&info, parser->report.report_ctx);
							parser->has_error = true;
						\}
						
						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						ret->stmt = AR_NEW0(tguStmt_t);								
						ret->stmt->stmt_type = TGU_STT_CONTINUE;
						ret->stmt->lex_info = ns[0]->token->lex_info;
						return ret;

					}

					|	"break" 	semi				%action on_break_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						AR_ASSERT(ns != NULL);
						if(parser->loop_level == 0)
						\{
							tguReportInfo_t	info;
							info.type = TGU_REPORT_ERROR_SYNTAX_T;
							info.syntax_error.tok = ns[0]->token;
							info.syntax_error.msg = L"illegal break";
							AR_ASSERT(parser->report.report_func != NULL);
							parser->report.report_func(&info, parser->report.report_ctx);
							parser->has_error = true;
						\}
						
						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						ret->stmt = AR_NEW0(tguStmt_t);								
						ret->stmt->stmt_type = TGU_STT_BREAK;
						ret->stmt->lex_info = ns[0]->token->lex_info;
						return ret;
						
					}

					|	"return" 	semi				%action on_return_statement
					|	"return" 	expression semi		%action on_return_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr;
						AR_ASSERT(nodes != NULL && count == 2 || count == 3);
						AR_ASSERT(parser->current_function != NULL);

						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						ret->stmt = AR_NEW0(tguStmt_t);								
						ret->stmt->stmt_type = TGU_STT_RETURN;
						
						if(ns[1] == NULL)
						\{
							expr = NULL;
						\}else
						\{
							AR_ASSERT(ns[1]->type == TGU_NODE_EXPR_T);
							expr = ns[1]->expr;
							ns[1]->expr = NULL;
						\}
						ret->stmt->return_stmt.expr = expr;
						ret->stmt->lex_info = ns[0]->token->lex_info;
						return ret;
					}
					;


semi					:	";"								%action	on_semicolon
					|	error								%action	on_semicolon
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						AR_ASSERT(count == 1 && parser != NULL);
						if(ns[0] == NULL)
						\{
							parser->has_error = true;
						\}

						return NULL;
					}	
					;

/*****************************************表达式*********************************************/


expression				:	assignment_expression		%action auto_return_0
					;
	
assignment_expression		:	constant_expression							%action 	auto_return_0
					|	unary_expression	"="	table_constructor		%action	on_assignment_expression
					|	unary_expression	"="	assignment_expression		%action	on_assignment_expression
					{
							return NULL;
					}
					;


constant_expression		:	binary_expression										%action 	auto_return_0
					|	binary_expression	"?"	expression	":"	constant_expression		%action	on_condition_expression
					;

binary_expression		:	unary_expression							%action 	auto_return_0
					|	binary_expression	"-"	binary_expression		%action	on_binary_expression
					|	binary_expression	"*"	binary_expression		%action	on_binary_expression
					|	binary_expression	"/"	binary_expression		%action	on_binary_expression
					|	binary_expression	"%"	binary_expression		%action	on_binary_expression
					|	binary_expression	"<"	binary_expression		%action	on_binary_expression
					|	binary_expression	"<="	binary_expression		%action	on_binary_expression
					|	binary_expression	">"	binary_expression		%action	on_binary_expression
					|	binary_expression	">="	binary_expression		%action	on_binary_expression
					|	binary_expression	"=="	binary_expression		%action	on_binary_expression
					|	binary_expression	"!="	binary_expression		%action	on_binary_expression
					|	binary_expression	"&&"	binary_expression		%action	on_binary_expression
					|	binary_expression	"||"	binary_expression		%action	on_binary_expression
					|	binary_expression	"+"	binary_expression		%action	on_binary_expression
					{
						return NULL;
					}
					;

unary_expression	:	postfix_expression		%action 	auto_return_0
				|	"++" 	unary_expression	%action	on_unary_expression
				|	"--"	unary_expression	%action	on_unary_expression
				|	"+"	unary_expression	%action	on_unary_expression
				|	"-"	unary_expression	%action	on_unary_expression
				|	"!"	unary_expression	%action	on_unary_expression
				{
					return NULL;
				}
				;

postfix_expression	:	postfix_expression	"++"		%action	on_post_add_minus_expression
				|	postfix_expression	"--"		%action	on_post_add_minus_expression
				{
					return NULL;
				}

				|	postfix_expression "[" expression "]"		%action	on_index_expression
				|	postfix_expression "[" error "]"		%action	on_index_expression
				{
					return NULL;
				}

				|	call_expression					%action auto_return_0
				|	primary_expression				%action auto_return_0
				;	
				

{
	static tguExpr_t*		make_identifier_expression(tguParser_t	*parser, 	tguToken_t *token)
	\{
			return NULL;
	\}

	static tguExpr_t*		make_constant_expression(tguParser_t	*parser, 		tguToken_t *token)
	\{
			return NULL;
	\}

};

primary_expression	:	"(" expression")"							%action	on_lp_rp_expression
				{
					tguParser_t	*parser = (tguParser_t*)ctx;
					psrNode_t 	*ret;
					if(nodes[1] == NULL)
					\{
						parser->has_error = true;
						ret = NULL;
					\}else
					\{
						ret = nodes[1];
						nodes[1] = NULL;
					\}
					return ret;
				}

				|	"(" error ")"								%action	on_lp_rp_expression
				|	NAME										%action	on_identifier_expression
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr;
						AR_ASSERT(parser != NULL && ns != NULL && count == 1);
						expr = make_identifier_expression(parser, ns[0]->token);
						
						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_EXPR_T;
						ret->expr = expr;
						return ret;

				}

				|	FLOAT_NUMBER			%action	on_constant_expression
				|	INT_NUMBER				%action	on_constant_expression
				|	STRING				%action	on_constant_expression
				|	"true"				%action	on_constant_expression
				|	"false"				%action	on_constant_expression
				|	"null"				%action	on_constant_expression
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr;
						AR_ASSERT(parser != NULL && ns != NULL && count == 1);
						expr = make_constant_expression(parser, ns[0]->token);
						
						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_EXPR_T;
						ret->expr = expr;
						return ret;
				}
				;

{
	static tguExpr_t*		make_call_expression(tguParser_t	*parser, tguExpr_t *args)
	\{
			return NULL;
	\}
};

call_expression		:	postfix_expression "(" expression_list ")"		%action	on_call_expression
				|	postfix_expression "(" error ")"			%action	on_call_expression
				|	postfix_expression "(" 	")"				%action	on_call_expression
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr, *args;
						if(count == 4)
						\{
							if(ns[2] == NULL)
							\{
								args = NULL;
								parser->has_error = true;
							\}else
							\{
								args = ns[2]->expr;
								ns[2]->expr = NULL;
							\}
						\}else
						\{
							args = NULL;
						\}
						AR_ASSERT(parser != NULL && ns != NULL && count == 1);
						
						expr = make_call_expression(parser, args);
						
						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_EXPR_T;
						ret->expr = expr;
						return ret;
				}
				;

expression_list		:	expression_list "," expression				
				|	expression
				;

