


%name    delim             :     "[\x{000A}\x{000B}\x{000C}\x{000D}\x{0085}\x{2028}\x{2029}\x{0020}\f\n\r\t\v\x{0009}\x{0020}\x{00A0}\x{1680}\x{180E}\x{2000}-\x{200A}\x{202F}\x{205F}\x{3000}]"
                        ;

%name    comment        :    "/\*([^*]|\*+[^*/])*\*+/"    
                       ;

%name    comment_line        :    "(//[^\x{000A}\x{000B}\x{000C}\x{000D}\x{0085}\x{2028}\x{2029}]*(\x{000A}|\x{000B}|\x{000C}|\x{000D}|\x{0085}|\x{2028}|\x{2029}|$))"
                          ;

%name skip_lexem        :     "{delim}|{comment_line}|{comment}"
                	   ;


%name    digit                :    "[0-9]"                
                        ;


%name    number                :    "{digit}+"                
                        ;


/*
\x{4E00}-\x{9FA5}     (中文)
\x{3130}-\x{318F}     (韩文)
\x{AC00}-\x{D7A3}    (韩文)
\x{0800}-\x{4E00}    (日文)
*/

//ASCII + 中日韩


%name hex_digit         :    "[0-9a-fA-F]"
                        ;

%name hex_literal       :    "0(x|X){hex_digit}+"
                        ;

%name oct_literal       :    "0[0-7]+"
                        ;

%name dec_literal       :    "(0|[1-9][0-9]*)"
                        ;




%name    exponet            :    "(e|E)(\+|\-)?[0-9]+"
                            ;

%name float_literal         :    "(((([0-9]\.[0-9]*)){exponet}?)|([0-9]+{exponet}))"
                            ;




/*  '"'  == \x22,  '\'' == \x27 */

%name    escape_seq        :    "(\\\x22)" 
                		;

%name    string_dq        	:     "(\x22({escape_seq}|[^\x22])*\x22)"        //只能提取"..."或"\""此类串，其它词法规则要到语义例程中处理    
                		;




%name        float_constant    :    "{float_literal}"
                    		    ;
%name        hex_constant      :    "{hex_literal}"
                    		   ;
%name        oct_constant        :    "{oct_literal}"
                    			;
%name        dec_constant        :    "{dec_literal}"
                    			;




%token     %skip            :    "{skip_lexem}"                ,1                %value    "TOK_DELIM_ID"             ;            //空白，需要过滤





%token        STRING        :    "{string_dq}"                        %value    "TOK_STRING"            %action on_string_leaf_handler
{:
		AR_ASSERT(tok != NULL && tok->type == TOK_STRING);
		
:}
;


%token        FLOAT_NUMBER    :    "{float_constant}"         				,2    %value    "TOK_FLOAT_NUMBER"      %action default_float_leaf_handler      
{:

:}
;

%token        INT_NUMBER      :    "{hex_constant}|{oct_constant}|{dec_constant}"     	,2    %value    "TOK_INT_NUMBER"        %action default_integer_leaf_handler
{:

:}
;


%token    "null"        :    '"null"'        ,1            %value    "TOK_NULL"            %action default_leaf_handler            ;
%token    "true"        :    '"true"'        ,1            %value    "TOK_TRUE"            %action default_leaf_handler            ;
%token    "false"       :    '"false"'        ,1            %value    "TOK_FALSE"            %action default_leaf_handler            ;





%token    "{"        :    '"{"'            ,0                    %value    "TOK_L_BRACES"        %action default_leaf_handler            ;
%token    "}"        :    '"}"'            ,0                    %value    "TOK_R_BRACES"        %action default_leaf_handler            ;
%token    "["        :    '"["'            ,0                    %value    "TOK_L_SQUARE"        %action default_leaf_handler            ;
%token    "]"        :    '"]"'            ,0                    %value    "TOK_R_SQUARE"        %action default_leaf_handler            ;
%token    ","        :    '","'            ,0                    %value    "TOK_COMMA"            %action default_leaf_handler            ;
%token    ":"        :    '":"'            ,0                    %value    "TOK_COLON"            %action default_leaf_handler            ;



%start json;


json	:	array					%action "auto_return_0"
	|	object					%action "auto_return_0"
	{:
		  psrRetVal_t ret = {AR_S_YES, (psrNode_t*)nodes[0]};
                return ret;
       :}
	;


optional_dot        		:    ","
                    		|    .
                    		;


object :	"{"	"}"						%action    "on_object"
	|	"{"	members	optional_dot "}"		%action    "on_object"
	|	"{"	error	"}"					%action    "on_object"
	;


members :	members "," pair			%action    "on_pair_list"
	 |	pair					%action    "auto_return_0"
	;

pair	:	STRING	":"	value			%action    "on_pair"
	;

array	:	"["	"]"						%action    "on_array"
	|	"["	elements optional_dot  "]"			%action    "on_array"
	|	"["	error	"]"					%action    "on_array"
	;

elements	:	elements "," value		%action on_elements_list
		|	value				%action "auto_return_0"
		;



value	:	STRING					%action "auto_return_0"
	|	INT_NUMBER				%action "auto_return_0"
	|	FLOAT_NUMBER				%action "auto_return_0"
	|	object					%action "auto_return_0"
	|	array					%action "auto_return_0"
	|	"true"					%action "auto_return_0"
	|	"false"				%action "auto_return_0"
	|	"null"					%action "auto_return_0"
	;











