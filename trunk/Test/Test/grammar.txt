
%lex{
	delim 			= 	[ \r\n\t]
	any    			= 	[^\0]
	any_but_newline	=	[^\n\0]
	comment			= 	\/\*([^\*]|\*+[^\*\/])*\*+\/
	comment_line	= 	\/\/[^\n]*\n
	digit			= 	[0-9]
	number  		=	{digit}+
	letter			=	[A-Z_a-z]

	int_const		=	0|[1-9]{number}*|0{number}|0x[0-9A-F]*

	exp_part		=	(e|E)("+"|"-")?{number}
	float_const		=	{number}.{number}({exp_part}?)
	identifier		=	{letter}({letter}|{digit})*
	EOI				=	\0
	

	%skip 1			{delim}*
	%skip 2			{comment}+
	%skip 3			{comment_line}+

	270				{int_const}
	271				{float_const}
	
	290,0			{identifier}
	
	300,1			"="	
	
	400,1			"&&"
	401,1			"||"
	405,1			"=="
	406,1			"!="
	407,1			"<"
	408,1			">"
	409,1			"<="
	410,1			">="

	413,1			"+"
	414,1			"-"
	415,1			"*"
	416,1			"/"
	417,1			"%"
	
	503,1			"!"

	600,1			"["
	601,1			"]"
	602,1			"("
	603,1			")"
	604,1			"{"
	605,1			"}"
	606,1			";"
	610,1			","

	702,1			"int"
	704,1			"float"
	705,1			"bool"
	706,1			"char"

	800,1			"for"
	802,1			"if"
	803,1			"break"
	806,1			"do"
	807,1			"else"
	809,1			"while"
	
	900,1			"true"
	901,1			"false"
	0				{EOI}
%}


%token{	
	int_const 		: 	270,
	float_const 	: 	271,
	id  			: 	290,
	"="				:	300,
	"&&"			:	400,
	"||"			:	401,
	"=="			:	405,	
	"!="			:	406,
	"<"				:	407,
	">"				:	408,
	"<="			:	409,
	">="			:	410,
	"+"				:	413,
	"-"				:	414,
	"*"				:	415,
	"/"				:	416,
	"%"				:	417,
	"!"				:	503,
	
	"["				:	600,
	"]"				:	601,
	"("				:	602,
	")"				:	603,

	"{"				:	604,
	"}"				:	605,
	";"				:	606,
	","				:	610,

	int				:	702,	
	float			:	704,
	bool			:	705,
	char			:	706,

	for				:	800,
	if				:	802,	
	break			:	803,
	do				:	806,
	else			:	807,
	while			:	809,

	true			:	900,
	false			:	901
	;
%}

%prec{
%noassoc 	IF_STMT_PREC;
%noassoc	IF_STMT_ELSE_STMT_PREC;

%}



%rules{
	program 			->		block;
	block			->		"{" decls stmts "}";
	decls			->		decls decl | .;
	decl			->		type id ";";
	type			->		type "[" int_const "]" | int | float | bool | char;  
	stmts			->		stmts stmt | .;
	

	stmt			->		loc "=" bool_expr ";"
					|	if "(" bool_expr ")" stmt %prec IF_STMT_PREC
					|	if "(" bool_expr ")" stmt else stmt %prec IF_STMT_ELSE_STMT_PREC
					|	while "(" bool_expr ")" stmt
					|	do stmt while "(" bool_expr ")" ";"
					|	break ";"	
					|	block
					;

	
	loc			->	loc "[" bool_expr "]" | id;	
	bool_expr			->	bool_expr "||" join | join;
	join 			->	join "&&" equality | equality;
	equality			->	equality "==" rel | equality "!=" rel | rel;
	rel			->	expr "<" expr | expr "<=" expr | expr ">=" expr | expr ">" expr | expr;
	expr			->	expr "+" term | expr "-" term | term;
	term			->	term "*" unary | term "/" unary | term "%" unary | unary;
	unary			->	"!" unary | "-" unary | factor;
	factor			->	"(" bool_expr")" | loc | int_const | float_const | true | false ;
%}
