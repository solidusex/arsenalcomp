/* * Copyright (c) 2011 by Solidus * This file is part of Arsenal library tools source code. * * Permission to use, copy, modify, distribute and sell this software * and its documentation for any purpose is hereby granted without fee, * provided that the above copyright notice appear in all copies and * that both that copyright notice and this permission notice appear * in supporting documentation.It is provided "as is" without express  * or implied warranty. * */#import "InputChecker.h"#import "GrammarDesignerDocument.h"@implementation InputTextView-(void)disableLineWrap{		const float LargeNumberForText = 1.0e7;				NSScrollView *scrollView = [self enclosingScrollView];		[scrollView setHasVerticalScroller:YES];		[scrollView setHasHorizontalScroller:YES];		[scrollView setAutoresizingMask:(NSViewWidthSizable | NSViewHeightSizable)];				NSTextContainer *textContainer = [self textContainer];		[textContainer setContainerSize:NSMakeSize(LargeNumberForText, LargeNumberForText)];		[textContainer setWidthTracksTextView:NO];		[textContainer setHeightTracksTextView:NO];				[self setMaxSize:NSMakeSize(LargeNumberForText, LargeNumberForText)];		[self setHorizontallyResizable:YES];		[self setVerticallyResizable:YES];		[self setAutoresizingMask:NSViewNotSizable];}-(void)resetFont{		NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];				NSString *name;		NSInteger size;						name = [defaults stringForKey : PREFERENCE_FONT_INPUT_NAME];		size = (NSInteger)[defaults doubleForKey : PREFERENCE_FONT_INPUT_SIZE];				[font release];		font = [NSFont fontWithName : name							   size : size				];				[font retain];				[self setFont : font];}-(void)handleFontChanged : (NSNotification*)note{		DLog(@"InputTextView::handleFontChanged for notification %@", note);		[self resetFont];		}-(void)setHasValidParser : (BOOL)valid{		hasValidParser = valid;}-(void)awakeFromNib{				NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];		[nc addObserver : self			   selector : @selector(handleFontChanged:)				   name : NOTIFICATION_PREFERENCE_FONT_CHANGED				 object : nil		 ];		[self resetFont];		[self disableLineWrap];						hasValidParser = NO;				}-(void)dealloc{		NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];		[nc removeObserver : self];		[font release];		font = nil;		[super dealloc];}-(void) parseInput :(id)sender{		NSString *s = [self string];				if(s != nil && [s length] > 0)		{				DLog(@"InputTextView Sending NOTIFICATION_INPUTVIEW_INVOKE_PARSEINPUT");						NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];				[nc postNotificationName :	NOTIFICATION_INPUTVIEW_INVOKE_PARSEINPUT 								  object :  self								userInfo : [NSDictionary dictionaryWithObject : s 																	   forKey : @"UserInfo"											]				 ];		}}-(void) openFile :(id)sender{		DLog(@"On openFile");}-(void) saveFile :(id)sender{		DLog(@"On saveFile");}- (NSMenu *)defaultMenu {		        NSMenu *theMenu = [[[NSMenu alloc] initWithTitle:@"Model browser context menu"] autorelease];		        [theMenu insertItemWithTitle:@"Parse" action:@selector(parseInput:) keyEquivalent:@"" atIndex:0];				[theMenu insertItem : [NSMenuItem separatorItem]					atIndex : 1		 ];							[theMenu insertItemWithTitle:@"Cut" action:@selector(cut:) keyEquivalent:@"" atIndex:2];		[theMenu insertItemWithTitle:@"Copy" action:@selector(copy:) keyEquivalent:@"" atIndex:3];		[theMenu insertItemWithTitle:@"Paste" action:@selector(paste:) keyEquivalent:@"" atIndex:4];				[theMenu insertItemWithTitle:@"Select All" action:@selector(selectAll:) keyEquivalent:@"" atIndex:5];				[theMenu insertItem : [NSMenuItem separatorItem]					atIndex : 6		 ];								        NSString* openItem = [NSString stringWithFormat: @"Open"];        [theMenu insertItemWithTitle: openItem action:@selector(openFile:) keyEquivalent:@"" atIndex:7];				NSString* saveItem = [NSString stringWithFormat: @"Save"];        [theMenu insertItemWithTitle: saveItem action:@selector(saveFile:) keyEquivalent:@"" atIndex:8];		        return theMenu;}-(NSMenu *)menuForEvent:(NSEvent *)theEvent {        return [self defaultMenu];  }-(BOOL)validateUserInterfaceItem:(id < NSValidatedUserInterfaceItem >)item{						BOOL ret = YES;		assert(item != nil);						NSMenuItem *menuItem = (NSMenuItem*)item;				NSString *s = [self string];								if([menuItem action] == @selector(parseInput:)) 		{				if([s length] == 0 || !hasValidParser)				{						ret = NO;				}								}else if([menuItem action] == @selector(openFile:))		{										}else if([menuItem action] == @selector(saveFile:))		{				if([s length] == 0)				{						ret = NO;				}		}else		{				ret = [super validateUserInterfaceItem : item];		}		return ret;}@end