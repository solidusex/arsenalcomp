
%name	delim 		:	"[ \r\n\t]"			
				;
%name	comment		:	"/\*([^\*]|\*+[^\*/])*\*+/"	
				;
%name	comment_line	:	"//[^\n]*\n"			
				;
%name skip_lexem	: 	"{delim}|{comment}|{comment_line}"
				;




%name	digit			:	"[0-9]"				
				;
%name	number		:	"{digit}+"				
				;
%name	letter		:	"[A-Z_a-z]"
				;



%name hex_digit		:	"[0-9a-fA-F]"
				;

%name hex_literal 	:	"0(x|X){hex_digit}+"
				;

%name oct_literal	:	"0[0-7]+"
				;

%name dec_literal	:	"(0|[1-9][0-9]*)"
				;




%name	exponet			:	"(e|E)(\+|\-)?[0-9]+"
					;


%name float_literal		:	"(((([0-9]\.[0-9]*)|(\.[0-9]+)){exponet}?)|([0-9]+{exponet}))"
					;






/*  '"'  == \x22,  '\'' == \x27 */

%name	escape_seq		:	"(\\(\x22|\x27))"	
				;

%name	string_dq		: 	"(\x22({escape_seq}|[^\x22])*\x22)"		//只能提取"..."或"\""此类串，其它C规则要到语义例程中处理	
				;

%name	string_sq		:	"\x27({escape_seq}|[^\x27])*\x27"		//提取'...'或'\''此类串，其它C规则要到语义例程中处理	
				;



%name	keyword_lhd	:	"[A-Z_a-z0-9]"
				;


%name		float_constant	:	"{float_literal}(?!{keyword_lhd})"
					;
%name		hex_constant	:	"{hex_literal}(?!{keyword_lhd})"
					;
%name		oct_constant	:	"{oct_literal}(?!{keyword_lhd})"
					;
%name		dec_constant	:	"{dec_literal}(?!{keyword_lhd})"
					;


%token 	%skip			:	"{skip_lexem}+"				,1		%action	"TOK_DELIM_ID"	;//空白，需要过滤




%token	NAME			:	"{letter}({letter}|{digit})*"					%action "TOK_NAME"					;
%token	STRING		:	"{string_dq}|{string_sq}"						%action "TOK_STRING"					;
%token	FLOAT_NUMBER	:	"{float_constant}"						,2	%action "TOK_FLOAT_NUMBER"				;
%token	INT_NUMBER		:	"{hex_constant}|{oct_constant}|{dec_constant}"	,2	%action "TOK_INT_NUMBER"				;









%token	"for"		:	'"for"(?!{keyword_lhd})'		,1					%action	"TOK_FOR"			;
%token	"do"		:	'"do"(?!{keyword_lhd})'		,1					%action	"TOK_DO"			;
%token	"while"	:	'"while"(?!{keyword_lhd})'		,1					%action	"TOK_WHILE"		;
%token	"if"		:	'"if"(?!{keyword_lhd})'		,1					%action	"TOK_IF"			;
%token	"else"	:	'"else"(?!{keyword_lhd})'		,1					%action	"TOK_ELSE"			;

%token	"continue"	:	'"continue"(?!{keyword_lhd})'	,1					%action	"TOK_CONTINUE"		;
%token	"break"	:	'"break"(?!{keyword_lhd})'		,1					%action	"TOK_BREAK"		;
%token	"return"	:	'"return"(?!{keyword_lhd})'	,1					%action	"TOK_RETURN"		;

%token	"null"	:	'"null"(?!{keyword_lhd})'		,1					%action	"TOK_NULL"			;
%token	"in"		:	'"in"(?!{keyword_lhd})'		,1					%action	"TOK_IN"			;
%token	"true"	:	'"true"(?!{keyword_lhd})'		,1					%action	"TOK_TRUE"			;
%token	"false"	:	'"false"(?!{keyword_lhd})'		,1					%action	"TOK_FALSE"		;
%token	"var"		:	'"var"(?!{keyword_lhd})'		,1					%action	"TOK_VAR"			;



%token	"..."		:	'"..."'		,2								%action 	"TOK_ELLIPSIS"		;	


%token	"++"		:	'"++"'		,1								%action	"TOK_INC"	;
%token	"--"		:	'"--"'		,1								%action	"TOK_DEC"		;


%token	"&&"		:	'"&&"'		,1								%action	"TOK_ANDAND"	;
%token	"||"		:	'"||"'		,1								%action	"TOK_OROR"		;




%token	"<="		:	'"<="'		,1								%action 	"TOK_LE"		;
%token	">="		:	'">="'		,1								%action 	"TOK_GE"		;
%token	"=="		:	'"=="'		,1								%action 	"TOK_EQ"		;
%token	"!="		:	'"!="'		,1								%action	"TOK_NE"		;
%token	"<"		:	'"<"'			,0								%action	"TOK_LESS"		;
%token	">"		:	'">"'			,0								%action	"TOK_GREATER"	;




%token	"{"		:	'"{"'			,0								%action "TOK_L_BRACES"		;
%token	"}"		:	'"}"'			,0								%action "TOK_R_BRACES"		;
%token	"("		:	'"("'			,0								%action "TOK_L_PAREN"			;
%token	")"		:	'")"'			,0								%action "TOK_R_PAREN"			;
%token	"["		:	'"["'			,0								%action "TOK_L_SQUARE"		;
%token	"]"		:	'"]"'			,0								%action "TOK_R_SQUARE"		;

%token	";"		:	'";"'			,0								%action "TOK_SEMICOLON"			;
%token	","		:	'","'			,0								%action "TOK_COMMA"				;
%token	"="		:	'"="'			,0								%action "TOK_ASSIGN"				;



%token	"+"		:	'"+"'			,0								%action "TOK_ADD"				;
%token	"-"		:	'"-"'			,0								%action "TOK_SUB"				;
%token	"*"		:	'"*"'			,0								%action "TOK_MUL"				;
%token	"/"		:	'"/"'			,0								%action "TOK_DIV"				;
%token	"%"		:	'"%"'			,0								%action "TOK_MOD"				;

%token	"!"		:	'"!"'			,0								%action "TOK_NOT"				;

%token	"."		:	'"."'			,0								%action "TOK_DOT"				;
%token	":"		:	'":"'			,0								%action "TOK_COLON"				;
%token	"?"		:	'"?"'			,0								%action "TOK_QUEST"				;








%left		"?"	":"							;
%left		"||"								;
%left		"&&"								;
%left		"=="	"!="	"<"	"<="	">"	">="			;
%left		"+"	"-"							;
%left		"*"	"/"	"%"						;
%right	PREC_UNARY							;

/*
"if" "(" expression ")" statement "else" statement 
产生式的优先级依赖于其最右终结符或显性指定,这里就是"else"
*/
%nonassoc IF_WITHOUT_ELSE						;
%nonassoc "else"							;


/**************************************************************************************/
%start 				program				;



program			:	translation_unit
				;

translation_unit	:	element
				|	translation_unit	element
				;



element				:	declaration
					|	function_defination
					|	statement
					;



function_defination		:	"var"		NAME	"("	params	")"	compound_statement
					;


namelist				:	namelist	"," NAME
					|	NAME
					;


params				:	.
					|	namelist
					|	"..."
					|	namelist	","	"..."
					;




/*************************************声明***************************************************/

declaration			:	"var"		init_declarator_list 	semi
					;

declaration_list		:	declaration
					|	declaration_list declaration
					;

init_declarator_list		:	init_declarator
					|	init_declarator_list "," init_declarator
					;


init_declarator			:	NAME
					|	NAME	"=" initializer
					;




initializer			:	expression
					|	table_constructor
					;




/*************************************语句***************************************************/


statement				:	compound_statement	
					|	expression_statement	
					|	selection_statement	
					|	iteration_statement	
					|	jump_statement		
					|	assignment_statement	
					;

/************************************************************************************/

assignment_statement		:	variable	"="	expression	semi
					|	variable	"="	table_constructor	semi
					;



variable				:	NAME
					|	postfix_expression "["	expression  "]"
					|	postfix_expression "."	NAME
					;



/**************************************compound_statement*****************************/


compound_statement		:	start_block	compound_statement_body	close_block
					;

start_block			:	"{"
					;

close_block			:	"}"
					;

compound_statement_body	:	compound_statement_declarations	
					|	compound_statement_declarations statement_list	
					;

compound_statement_declarations	:	declaration_list
						|	.
						;



/*****************************************************************************/

statement_list			:	statement
					|	statement_list statement
					;

expression_statement		:	semi
					|	expression	 semi
					;

selection_statement		:	"if" "(" expression ")" statement				%prec IF_WITHOUT_ELSE
					|	"if" "(" expression ")" statement "else" statement	
					;


for_expression			:	assignment_statement expression_statement	expression
					|	assignment_statement expression_statement
					|	expression_statement expression_statement	expression
					|	expression_statement expression_statement
					|	NAME  "in" expression
					;



iteration_statement		:	"while" "(" expression ")" statement
					|	"do" statement "while" "(" expression ")" semi
					|	"for" "(" for_expression")" statement
					;

jump_statement			:	"continue" semi
					|	"break" 	semi
					|	"return" 	semi
					|	"return" expression semi

					;

semi					:	";"
					|	error
					;

/*****************************************表达式*********************************************/



expression			:	binary_expression		
				|	binary_expression	"?"	expression	":"	expression
				;

expression_list		:	expression_list "," expression
				|	expression
				;


primary_expression	:	"(" expression")"	
				|	NAME	
				|	FLOAT_NUMBER
				|	INT_NUMBER
				|	STRING
				|	"true"
				|	"false"
				|	"null"
				;



postfix_expression	:	primary_expression
				|	postfix_expression "[" expression "]"				
				|	postfix_expression "(" ")"						
				|	postfix_expression "(" expression_list")"	
				|	postfix_expression "++"
				|	postfix_expression "--"						
				;



unary_expression	:	postfix_expression							
				|	"++" unary_expression		
				|	"--" unary_expression		
				|	"+"	unary_expression
				|	"-"	unary_expression
				|	"!"	unary_expression
				;


binary_expression	:	unary_expression							
				|	binary_expression	"+"	binary_expression
				|	binary_expression	"-"	binary_expression
				|	binary_expression	"*"	binary_expression
				|	binary_expression	"/"	binary_expression
				|	binary_expression	"%"	binary_expression
				|	binary_expression	"<"	binary_expression
				|	binary_expression	"<="	binary_expression
				|	binary_expression	">"	binary_expression
				|	binary_expression	">="	binary_expression
				|	binary_expression	"=="	binary_expression
				|	binary_expression	"!="	binary_expression
				|	binary_expression	"&&"	binary_expression
				|	binary_expression	"||"	binary_expression
				;












/*******************************************************************************************/


table_constructor		:	"{"	filed_list "}"
					|	"{"	"}"
					;

filed_list 			:	filed 
					|	filed_list "," filed
					;


filed					:	expression
					|	table_constructor
					|	"["	expression	"]"	"="  expression
					|	NAME				"="	expression
					|	NAME				"="	table_constructor
					;





