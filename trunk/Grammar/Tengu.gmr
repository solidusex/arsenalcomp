%code {:
/*
 * The Arsenal Library
 * Copyright (c) 2009 by Solidus
 * 
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.It is provided "as is" without express 
 * or implied warranty.
 *
 */
:}
;



/******************************************PreDefined code********************************************/
%code syntax_node {:

:}
;





%code syntax_tree_handler {:

    static void        AR_STDCALL on_free_node(psrNode_t *node, void *ctx)
    {
		AR_ASSERT(node != NULL && ctx != NULL);
		
        
    }

    static arStatus_t        AR_STDCALL on_error(const psrToken_t *tok, const size_t expected[], size_t count, void *ctx)
    {
/*
            tguParser_t    *parser;
            size_t        i;
            arString_t    *str;
            wchar_t        *tok_str;
            AR_ASSERT(tok != NULL && ctx != NULL);

            parser = (tguParser_t*)ctx;
            str = AR_CreateString();

            if(tok->term_val == 0)
            {
                    tok_str = AR_wcsdup(L"EOI");
            }else
            {
                    tok_str = AR_wcsndup(tok->str, tok->str_cnt);
            }
        
            AR_AppendFormatString(str, L"Invalid token : '%ls', expected ", tok_str);
            
            for(i = 0; i < count; ++i)
            {
                    AR_AppendFormatString(str, L"'%ls'", TGU_TokenValToString(expected[i]));
            }
            
            TGU_ReportError(&parser->report, AR_GetStringCString(str), tok->line);
        
            AR_DestroyString(str);
            str = NULL;
            AR_DEL(tok_str);
            tok_str = NULL;
*/
            return AR_S_YES;
    }
    
    static const psrHandler_t    __g_handler = {on_error, on_free_node};
:}
;






%name    delim             :     "[\x{000A}\x{000B}\x{000C}\x{000D}\x{0085}\x{2028}\x{2029}\x{0020}\f\n\r\t\v\x{0009}\x{0020}\x{00A0}\x{1680}\x{180E}\x{2000}-\x{200A}\x{202F}\x{205F}\x{3000}]"
                        ;

%name    comment        :    "/\*([^*]|\*+[^*/])*\*+/"    
                       ;

%name    comment_line        :    "(//[^\x{000A}\x{000B}\x{000C}\x{000D}\x{0085}\x{2028}\x{2029}]*(\x{000A}|\x{000B}|\x{000C}|\x{000D}|\x{0085}|\x{2028}|\x{2029}|$))"
                          ;

%name skip_lexem        :     "{delim}|{comment_line}|{comment}"
                ;


%name    digit                :    "[0-9]"                
                        ;

%name    number                :    "{digit}+"                
                        ;


/*
\x{4E00}-\x{9FA5}     (中文)
\x{3130}-\x{318F}     (韩文)
\x{AC00}-\x{D7A3}    (韩文)
\x{0800}-\x{4E00}    (日文)
*/

//ASCII + 中日韩

%name    letter         :    "[A-Z_a-z\x{0800}-\x{4E00}\x{4E00}-\x{9FA5}\x{3130}-\x{318F}\x{AC00}-\x{D7AF}]"
                        ;



%name hex_digit         :    "[0-9a-fA-F]"
                        ;


%name hex_literal       :    "0(x|X){hex_digit}+"
                        ;

%name oct_literal       :    "0[0-7]+"
                        ;

%name dec_literal       :    "(0|[1-9][0-9]*)"
                        ;




%name    exponet            :    "(e|E)(\+|\-)?[0-9]+"
                            ;

%name float_literal         :    "(((([0-9]\.[0-9]*)){exponet}?)|([0-9]+{exponet}))"
                            ;




/*  '"'  == \x22,  '\'' == \x27 */

%name    escape_seq        :    "(\\(\x22|\x27|\\))"    
                ;

%name    string_dq        :     "(\x22({escape_seq}|[^\x22])*\x22)"        //只能提取"..."或"\""此类串，其它词法规则要到语义例程中处理    
                ;

%name    string_sq        :    "\x27({escape_seq}|[^\x27])*\x27"        //提取'...'或'\''此类串，其它词法规则要到语义例程中处理    
                ;



%name    keyword_lhd           :    "{letter}|[0-9]"                        ;


%name        float_constant    :    "{float_literal}(?!{keyword_lhd})"
                    ;
%name        hex_constant        :    "{hex_literal}(?!{keyword_lhd})"
                    ;
%name        oct_constant        :    "{oct_literal}(?!{keyword_lhd})"
                    ;
%name        dec_constant        :    "{dec_literal}(?!{keyword_lhd})"
                    ;


%token     %skip            :    "{skip_lexem}"                ,1                %value    "TOK_DELIM_ID"             ;            //空白，需要过滤



%code token_operation{:
    
   
:}
;



%token        NAME     :    "{letter}({letter}|{digit})*"                    %value    "TOK_NAME"            %action default_leaf_handler        
	                ;


%token        STRING        :    "{string_dq}|{string_sq}"                        %value    "TOK_STRING"            %action on_string_leaf_handler        
		              ;


%token        FLOAT_NUMBER    :    "{float_constant}"                        ,2    %value    "TOK_FLOAT_NUMBER"        %action default_leaf_handler        ;
%token        INT_NUMBER    :    "{hex_constant}|{oct_constant}|{dec_constant}"        ,2    %value    "TOK_INT_NUMBER"        %action default_leaf_handler        ;




%token    "import"    :    '"import"(?!{keyword_lhd})'   ,1            %value    "TOK_IMPORT"            %action default_leaf_handler            ;
%token    "from"    	  :    '"from"(?!{keyword_lhd})'   ,1            %value    "TOK_FROM"            %action default_leaf_handler            ;

%token    "for"        :    '"for"(?!{keyword_lhd})'        ,1            %value    "TOK_FOR"            %action default_leaf_handler            ;
%token    "do"        :    '"do"(?!{keyword_lhd})'        ,1            %value    "TOK_DO"            %action default_leaf_handler            ;
%token    "while"    :    '"while"(?!{keyword_lhd})'        ,1            %value    "TOK_WHILE"            %action default_leaf_handler            ;
%token    "if"        :    '"if"(?!{keyword_lhd})'        ,1            %value    "TOK_IF"            %action default_leaf_handler            ;
%token    "else"        :    '"else"(?!{keyword_lhd})'        ,1            %value    "TOK_ELSE"            %action default_leaf_handler            ;

%token    "continue"    :    '"continue"(?!{keyword_lhd})'    ,1            %value    "TOK_CONTINUE"        %action default_leaf_handler            ;
%token    "break"    :    '"break"(?!{keyword_lhd})'        ,1            %value    "TOK_BREAK"            %action default_leaf_handler            ;
%token    "return"    :    '"return"(?!{keyword_lhd})'        ,1            %value    "TOK_RETURN"            %action default_leaf_handler            ;

%token    "null"        :    '"null"(?!{keyword_lhd})'        ,1            %value    "TOK_NULL"            %action default_leaf_handler            ;
%token    "true"        :    '"true"(?!{keyword_lhd})'        ,1            %value    "TOK_TRUE"            %action default_leaf_handler            ;
%token    "false"    :    '"false"(?!{keyword_lhd})'        ,1            %value    "TOK_FALSE"            %action default_leaf_handler            ;
%token    "var"        :    '"var"(?!{keyword_lhd})'        ,1            %value    "TOK_VAR"            %action default_leaf_handler            ;

%token    "in"        :    '"in"(?!{keyword_lhd})'        ,1            %value    "TOK_IN"            %action default_leaf_handler            ;

/*
%token    "list"    		:    '"list"(?!{keyword_lhd})'        ,1            %value    "TOK_LIST"            %action default_leaf_handler            ;
%token    "table"  		:    '"table"(?!{keyword_lhd})'        ,1            %value   "TOK_TABLE"            %action default_leaf_handler           ;
*/

%token    "try"    		:    '"try"(?!{keyword_lhd})'   ,1            	%value    	"TOK_TRY"        	%action default_leaf_handler            	;
%token    "catch"  		:    '"catch"(?!{keyword_lhd})'   ,1            %value    	"TOK_CATCH"        	%action default_leaf_handler        	;
%token    "finally"  	:    '"finally"(?!{keyword_lhd})'   ,1          %value    	"TOK_FINALLY"       	%action default_leaf_handler        	;
%token    "throw"  		:    '"throw"(?!{keyword_lhd})'   ,1          	%value    	"TOK_THROW"         	%action default_leaf_handler        	;




%token    "..."        :    '"..."'    ,2                        %value    "TOK_ELLIPSIS"        %action default_leaf_handler            ;    


%token    "++"        :    '"++"'        ,1                        %value    "TOK_INC"            %action default_leaf_handler            ;
%token    "--"        :    '"--"'        ,1                        %value    "TOK_DEC"            %action default_leaf_handler            ;


%token    "&&"        :    '"&&"'        ,1                        %value    "TOK_ANDAND"            %action default_leaf_handler            ;
%token    "||"        :    '"||"'        ,1                        %value    "TOK_OROR"            %action default_leaf_handler            ;






%token    "<="       :    '"<="'        ,1                        %value    "TOK_LE"            %action default_leaf_handler            ;
%token    ">="       :    '">="'        ,1                        %value    "TOK_GE"            %action default_leaf_handler            ;
%token    "=="       :    '"=="'        ,1                        %value    "TOK_EQ"            %action default_leaf_handler            ;
%token    "!="       :    '"!="'        ,1                        %value    "TOK_NE"            %action default_leaf_handler            ;
%token    "<"        :    '"<"'         ,0                    %value    "TOK_LESS"            %action default_leaf_handler           ;
%token    ">"        :    '">"'         ,0                    %value    "TOK_GREATER"            %action default_leaf_handler        ;




%token    "{"        :    '"{"'            ,0                    %value    "TOK_L_BRACES"        %action default_leaf_handler            ;
%token    "}"        :    '"}"'            ,0                    %value    "TOK_R_BRACES"        %action default_leaf_handler            ;
%token    "("        :    '"("'            ,0                    %value    "TOK_L_PAREN"            %action default_leaf_handler            ;
%token    ")"        :    '")"'            ,0                    %value    "TOK_R_PAREN"            %action default_leaf_handler            ;
%token    "["        :    '"["'            ,0                    %value    "TOK_L_SQUARE"        %action default_leaf_handler            ;
%token    "]"        :    '"]"'            ,0                    %value    "TOK_R_SQUARE"        %action default_leaf_handler            ;

%token    ";"        :    '";"'            ,0                    %value    "TOK_SEMICOLON"        %action default_leaf_handler            ;
%token    ","        :    '","'            ,0                    %value    "TOK_COMMA"            %action default_leaf_handler            ;
%token    "="        :    '"="'            ,0                    %value    "TOK_ASSIGN"            %action default_leaf_handler            ;



%token    "+"        :    '"+"'            ,0                    %value    "TOK_ADD"            %action default_leaf_handler            ;
%token    "-"        :    '"-"'            ,0                    %value    "TOK_SUB"            %action default_leaf_handler            ;
%token    "*"        :    '"*"'            ,0                    %value    "TOK_MUL"            %action default_leaf_handler            ;
%token    "/"        :    '"/"'            ,0                    %value    "TOK_DIV"            %action default_leaf_handler            ;
%token    "%"        :    '"%"'            ,0                    %value    "TOK_MOD"            %action default_leaf_handler            ;

%token    "!"        :    '"!"'            ,0                    %value    "TOK_NOT"            %action default_leaf_handler            ;


%token    ":"        :    '":"'            ,0                    %value    "TOK_COLON"            %action default_leaf_handler            ;
%token    "?"        :    '"?"'            ,0                    %value    "TOK_QUEST"            %action default_leaf_handler            ;


%token    "."        :    '"."'            ,0                    %value    "TOK_DOT"            %action default_leaf_handler            ;





/**************************************************优先级*****************************************************/

%right       "?"    ":"                          			;
%left        "||"                                			;
%left        "&&"                                			;
%left        "=="    "!="    "<"    "<="    ">"    ">="            	;
%left        "+"    "-"                          			;
%left        "*"    "/"    "%"                   			;




/*
"if" "(" expression ")" statement "else" statement 
产生式的优先级依赖于其最右终结符或显性指定,这里就是"else"
*/
%nonassoc IF_WITHOUT_ELSE                        ;
%nonassoc "else"                            ;






/**********************************************产生式****************************************/


%start    module	;


module		  :    element_list             %action    on_module
                |    .                        %action    on_module
	         ;



element_list	:	element                	%action    auto_return_null
		|	element_list    element  	%action    auto_return_null
              ;


element	:	declaration            	%action    auto_return_null
		|	function_defination        %action    auto_return_null
		|	statement
		;






/**************************************function_defination***********************************************/


%code    handle_function    {:
    
:}
;


function_signature		:    	"var"        NAME "(" params ")"                        %action    on_function_signature
				;


function_defination        :    function_signature    compound_statement    %action    on_function_defination
                           ;



params          :    namelist    ","    "..."        %action on_namelist_ellipsis
                |    namelist        		     %action    auto_return_0
                |    "..."            		     %action    on_ellipsis
                |    .            			     %action    NULL
                ;



namelist        :    namelist    "," NAME        %action    on_name_list
                |    NAME				 %action    on_name
                ;






/*************************************声明语句***************************************************/


declaration         :    "var"        init_declarator_list     semi       %action    auto_return_null
                    |    "var"        error                ";"            %action    auto_return_null
                    ;



init_declarator_list            :    init_declarator                        	      %action    auto_return_null
                    		     |    init_declarator_list "," init_declarator            %action    auto_return_null
                                ;



%code    handle_init_declarator{:
    
:};




init_declarator	:    	NAME    "="     expression                %action    	on_declarator
			|   	NAME	"=" 	aggregate_constructor	%action	on_declarator
                    	|    	NAME                            		%action    on_declarator
                    ;



aggregate_constructor	:	list_constructor 
				|	table_constructor
				;



list_constructor    		:   "["    list_field_list     optional_dot    "]"		%action on_list_contructor
                    		|   "["    "]"							%action on_list_contructor
                    		|   "["    error "]"							%action on_list_contructor
                    		;




list_field_list            	:    	list_field_list  "," list_field
				|	list_field
                    		;

list_field			:	expression
				|	aggregate_constructor
				;


table_constructor		:     "{"    table_field_list optional_dot    "}"        	%action    on_table_constructor
				|     "{"    "}"                					%action    on_table_constructor
				|     "{" error "}"                				%action    on_table_constructor
                    		;


table_field_list		:    table_field_list ","        table_field
				|    table_field
				;


table_field                	:	expression    ":"    expression
				|	expression	":"	aggregate_constructor
                    	      	;



optional_dot        		:    ","
                    		|    .
                    		;


/*************************************语句***************************************************/


statement		:    	compound_statement            %action    auto_return_0
			|    	expression_statement            %action    auto_return_0
			|    	selection_statement            %action    auto_return_0
			|    	iteration_statement            %action    auto_return_0
			|    	jump_statement            %action    auto_return_0
			|    	empty_statement            %action    auto_return_0
			|	import_statement 		%action auto_return_0
			|	throw_statement		%action auto_return_0
			|	try_statement			%action auto_return_0
                    ;




/**************************************************Exception statement*************************************************/

throw_statement	:	"throw" expression semi
			;

try_statement		:	"try"	compound_statement        "finally"	compound_statement
			|	"try" 	compound_statement        "catch"	"("	NAME ")"	compound_statement
			|	"try" 	compound_statement        "catch"	"("	NAME ")"	compound_statement	"finally" 	compound_statement
			;





/**************************************compound_statement*****************************/


%code {:
    
:};



compound_statement        :    start_block    compound_element_list        "}"        %action    on_compound_statement
	                    |    start_block                        "}"        %action    on_empty_compound_statement
		             |    start_block      error                  "}"        %action    on_compound_error_statement
                           ;



start_block            :    "{"        %action    on_start_block
	                ;








compound_element_list        :    compound_element_list        compound_element   
                    		  |    compound_element                        		
                    ;
















compound_element        :    statement        %action    on_compound_element
		          |    declaration        %action    auto_return_null
                	   ;













/**************************************statement*****************************/

%code {:
          

:};


import_statement	:	"import"	NAME ";"				%action on_import_statement
			|	"import"	NAME "from" STRING	";"		%action on_import_statement
			|	"import"	error ";"				%action on_import_statement
			;







%code {:
          

:};


empty_statement            :    ";"        %action    on_empty_statement
                           ;



expression_statement            :    expression     semi        %action on_expression_statement
		                  |    error    ";"            %action auto_return_null
              		     ;





selection_statement            :    if_statement        %action auto_return_0
		                 |    if_else_statement    %action auto_return_0
		                 ;





%code    {:
:};


if_statement    :    "if" "(" expression ")" statement            %prec IF_WITHOUT_ELSE        %action on_if_statement
                |    "if" "(" error ")" statement            %prec IF_WITHOUT_ELSE        %action on_if_statement
                ;


if_else_statement        :    "if" "(" expression ")" statement "else" statement    %action on_if_else_statement
                	    |    "if" "(" error ")" statement "else" statement        %action on_if_else_statement
		           ;




iteration_statement        :    while_statement            %action    auto_return_0
		             |    do_while_statement            %action    auto_return_0
                	      |    for_statement                %action    auto_return_0
		             ;






%code {:
 
:}
;






while_statement     :    "while" enter_loop  "(" expression ")" statement leave_loop    %action    on_while_statement
                    |    "while" enter_loop  "(" error ")" statement leave_loop        %action    on_while_statement
                    ;





do_while_statement           :    "do" enter_loop statement "while" "(" expression ")" leave_loop     semi            %action    on_do_while_statement
                    		  |    "do" enter_loop statement "while" "(" error ")" leave_loop         semi            %action    on_do_while_statement
		                ;	




for_statement            :    "for"    "("    for_in_expression    ")"     enter_loop  statement leave_loop    %action    on_for_statement
		           |    "for"    "("    error    ")"    enter_loop  statement leave_loop    %action    on_error_for_statement
                         ;

for_in_expression        :    NAME "in" expression    
                	    ;



enter_loop                :    .                    %action on_enter_loop
		            ;






leave_loop                :    .                    %action on_leave_loop
	                   ;






%code{:
    
:}
;


jump_statement       :    "continue"     semi                %action on_continue_statement
                    |    "break"     semi                %action on_break_statement
                    |    "return"     semi                %action on_return_statement
                    |    "return"     expression semi        %action on_return_statement
                    ;




semi                :    ";"                                %action    auto_return_0
                    |    error                                %action    on_semi_error
                    ;


/*****************************************表达式*********************************************/


expression          :    assignment_expression        %action auto_return_0
                    ;



%code {:
:}
;



assignment_expression	:    constant_expression                        %action     auto_return_0
				|    unary_expression    "="    assignment_expression    %action    on_assignment_expression
				;




%code {:

:}
;







constant_expression            :    binary_expression                                    %action     auto_return_0
                   		    |    binary_expression    "?"    expression    ":"        expression        %action    on_condition_expression
		                  ;





%code {:
:}
;

binary_expression   :    unary_expression                        %action     auto_return_0
	             |    binary_expression    "+"    binary_expression        %action    on_binary_expression
                    |    binary_expression    "-"    binary_expression        %action    on_binary_expression
                    |    binary_expression    "*"    binary_expression        %action    on_binary_expression
                    |    binary_expression    "/"    binary_expression        %action    on_binary_expression
                    |    binary_expression    "%"    binary_expression        %action    on_binary_expression
                    |    binary_expression    "<"    binary_expression        %action    on_binary_expression
                    |    binary_expression    "<="    binary_expression        %action    on_binary_expression
                    |    binary_expression    ">"    binary_expression        %action    on_binary_expression
                    |    binary_expression    ">="    binary_expression        %action    on_binary_expression
                    |    binary_expression    "=="    binary_expression        %action    on_binary_expression
                    |    binary_expression    "!="    binary_expression        %action    on_binary_expression
                    |    binary_expression    "&&"    binary_expression        %action    on_binary_expression
                    |    binary_expression    "||"    binary_expression        %action    on_binary_expression
                    ;


%code {:

:}
;


%code handle_constant {:
   
:}
;

%code handle_identifier{:
    


:}
;



unary_expression       :    "+"    unary_expression    %action    on_unary_expression
               	  |    "-"    unary_expression    %action    on_unary_expression
                       |    "!"    unary_expression    %action    on_unary_expression
       	         |    "++"     unary_expression    %action    on_unary_expression
	                |    "--"    unary_expression    %action    on_unary_expression
	                |    postfix_expression        %action     auto_return_0
       	         ;



postfix_expression        	:    postfix_expression    "++"        %action    on_post_add_minus_expression
                		|    postfix_expression    "--"        %action    on_post_add_minus_expression
               		|    postfix_expression "[" expression "]"        %action    on_index_expression
		              |    postfix_expression "[" error "]"            %action    on_index_expression
	                     |    postfix_expression     "."    NAME    %action    on_access_name_expression
	                     |    call_expression                %action auto_return_0
             			|    primary_expression                %action auto_return_0
		              ;    
                




primary_expression        	:    	"(" expression")"                            %action    on_lp_rp_expression
                	     	|    	"(" error ")"                                %action    on_lp_rp_expression
		            	|    	NAME                                        %action    on_identifier_expression
				|	constant            				%action    auto_return_0
		            	;



/**************************************import_expression***********************************************/

constant        :    FLOAT_NUMBER        %action    on_constant
                |    INT_NUMBER          %action    on_constant
                |    STRING              %action    on_constant
                |    "true"              %action    on_constant
                |    "false"            	%action    on_constant
                |    "null"              %action    on_constant
                ;





/*辅助函数*/
%code {:

:}
;



call_expression        :    postfix_expression "(" call_param_list ")"        	%action    on_call_expression
                |    postfix_expression "(" error ")"                		%action    on_call_expression
                |    postfix_expression "("     ")"                			%action    on_call_expression
                ;






/*
expression_list        :    expression                    %action    auto_return_0
                	  |    expression_list "," expression        %action    on_expression_list
                       ;
*/


call_param_list	:	call_param
			|	call_param_list "," call_param
			;


call_param		:	expression
			|	aggregate_constructor
			;








