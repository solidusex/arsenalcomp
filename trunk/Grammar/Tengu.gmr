
%code {
/*
 * The Arsenal Library
 * Copyright (c) 2009 by Solidus
 * 
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.It is provided "as is" without express 
 * or implied warranty.
 *
 */
};

/******************************************PreDefined code********************************************/



%code syntax_node {
	typedef enum
	\{
		TGU_NODE_TOKEN_T,
		TGU_NODE_STMT_T,
		TGU_NODE_EXPR_T,
		TGU_NODE_SYMB_T,
		TGU_NODE_TABLE_FILED_T,
		TGU_NODE_PARAMS_T,
		TGU_NODE_FUNC_T
	\}tguSynNodeType_t;

	typedef struct __tengu_syntax_node_tag
	\{
		tguSynNodeType_t		type;
		
		union\{
				tguToken_t			token;
				tguStmt_t			*stmt;
				tguExpr_t			*expr;
				tguTableField_t		*field;
				tguParams_t			*params;
				tguSymb_t			*symb;
		\};
	\}tguSynNode_t;


	static tguSynNode_t*	__create_synnode(tguSynNodeType_t type, void *data)
	\{
			tguSynNode_t *node;

			node = AR_NEW0(tguSynNode_t);
			node->type = type;

			switch(node->type)
			\{
			case TGU_NODE_TOKEN_T:
				node->token = *(tguToken_t*)data;
				break;
			case TGU_NODE_STMT_T:
				node->stmt = (tguStmt_t*)data;
				break;
			case TGU_NODE_EXPR_T:
				node->expr = (tguExpr_t*)data;
				break;
			case TGU_NODE_SYMB_T:
				node->symb = (tguSymb_t*)data;
				break;
			case TGU_NODE_TABLE_FILED_T:
				node->field = (tguTableField_t*)data;
				break;
			case TGU_NODE_PARAMS_T:
				node->params = (tguParams_t*)data;
				break;
			\}

			return node;
	\}


	static void	__destroy_synnode(	tguSynNode_t* node)
	\{
		AR_ASSERT(node != NULL);
		switch(node->type)
		\{
		case TGU_NODE_TOKEN_T:
			break;
		case TGU_NODE_STMT_T:
			if(node->stmt)
			\{
				TGU_DestroyStmt(node->stmt);
				node->stmt = NULL;
			\}
			break;
		case TGU_NODE_EXPR_T:
			if(node->expr)
			\{
				TGU_DestroyExpr(node->expr);
				node->expr = NULL;
			\}
			break;
		case TGU_NODE_SYMB_T:
			if(node->symb)
			\{
				TGU_DestroySymb(node->symb);
				node->symb = NULL;
			\}
			break;
		case TGU_NODE_TABLE_FILED_T:
			if(node->field)
			\{
				TGU_DestroyTableField(node->field);
				node->field = NULL;
			\}
			break;
		case TGU_NODE_PARAMS_T:
			if(node->params)
			\{	
				TGU_DestroyParams(node->params);
				node->params = NULL;
			\}
			break;


		\}
	\}
};




%code syntax_tree_handler {

	static void		AR_STDCALL on_free_node(psrNode_t *node, void *ctx)
	\{
		AR_ASSERT(node != NULL && ctx != NULL);
		__destroy_synnode((tguSynNode_t*)node);
		
	\}

	static void		AR_STDCALL on_error(const psrToken_t *tok, const size_t expected[], size_t count, void *ctx)
	\{
		
	\}
	
	static const psrHandler_t	__g_handler = \{on_error, on_free_node\};
};








%name	delim 			:	"[ \r\n\t]"			
				;
%name	comment		:	"/\*([^\*]|\*+[^\*/])*\*+/"	
				;

%name	comment_line		:	"(//[^\r\n]*\r?(\n|$))"
				;

%name skip_lexem		: 	"{comment_line}|{delim}|{comment}"
				;


%name	digit			:	"[0-9]"				
				;
%name	number			:	"{digit}+"				
				;
%name	letter			:	"[A-Z_a-z]"
				;



%name hex_digit		:	"[0-9a-fA-F]"
				;

%name hex_literal 		:	"0(x|X){hex_digit}+"
				;

%name oct_literal		:	"0[0-7]+"
				;

%name dec_literal		:	"(0|[1-9][0-9]*)"
				;




%name	exponet			:	"(e|E)(\+|\-)?[0-9]+"
					;


%name float_literal			:	"(((([0-9]\.[0-9]*)|(\.[0-9]+)){exponet}?)|([0-9]+{exponet}))"
					;





/*  '"'  == \x22,  '\'' == \x27 */

%name	escape_seq		:	"(\\(\x22|\x27))"	
				;

%name	string_dq		: 	"(\x22({escape_seq}|[^\x22])*\x22)"		//只能提取"..."或"\""此类串，其它词法规则要到语义例程中处理	
				;

%name	string_sq		:	"\x27({escape_seq}|[^\x27])*\x27"		//提取'...'或'\''此类串，其它词法规则要到语义例程中处理	
				;



%name	keyword_lhd		:	"[A-Z_a-z0-9]"
				;


%name		float_constant	:	"{float_literal}(?!{keyword_lhd})"
					;
%name		hex_constant		:	"{hex_literal}(?!{keyword_lhd})"
					;
%name		oct_constant		:	"{oct_literal}(?!{keyword_lhd})"
					;
%name		dec_constant		:	"{dec_literal}(?!{keyword_lhd})"
					;


%token 	%skip			:	"{skip_lexem}"				,1				%value	"TOK_DELIM_ID"	 		;			//空白，需要过滤



%code {
	
	tguSynNode_t*	on_lex_node(tguParser_t *parser, const psrToken_t *tok)
	\{
		return NULL;

	\}

};


%token	NAME		:	"{letter}({letter}|{digit})*"					%value	"TOK_NAME"			%action default_leaf_handler			;
%token	STRING		:	"{string_dq}|{string_sq}"						%value	"TOK_STRING"			%action default_leaf_handler			;
%token	FLOAT_NUMBER	:	"{float_constant}"						,2	%value	"TOK_FLOAT_NUMBER"		%action default_leaf_handler			;
%token	INT_NUMBER	:	"{hex_constant}|{oct_constant}|{dec_constant}"		,2	%value	"TOK_INT_NUMBER"		%action default_leaf_handler			;







%token	"for"		:	'"for"(?!{keyword_lhd})'		,1			%value	"TOK_FOR"			%action default_leaf_handler			;
%token	"do"		:	'"do"(?!{keyword_lhd})'		,1			%value	"TOK_DO"			%action default_leaf_handler			;
%token	"while"	:	'"while"(?!{keyword_lhd})'		,1			%value	"TOK_WHILE"			%action default_leaf_handler			;
%token	"if"		:	'"if"(?!{keyword_lhd})'		,1			%value	"TOK_IF"			%action default_leaf_handler			;
%token	"else"		:	'"else"(?!{keyword_lhd})'		,1			%value	"TOK_ELSE"			%action default_leaf_handler			;

%token	"continue"	:	'"continue"(?!{keyword_lhd})'	,1			%value	"TOK_CONTINUE"		%action default_leaf_handler			;
%token	"break"	:	'"break"(?!{keyword_lhd})'		,1			%value	"TOK_BREAK"			%action default_leaf_handler			;
%token	"return"	:	'"return"(?!{keyword_lhd})'	,1				%value	"TOK_RETURN"			%action default_leaf_handler			;

%token	"null"		:	'"null"(?!{keyword_lhd})'		,1			%value	"TOK_NULL"			%action default_leaf_handler			;
%token	"true"		:	'"true"(?!{keyword_lhd})'		,1			%value	"TOK_TRUE"			%action default_leaf_handler			;
%token	"false"	:	'"false"(?!{keyword_lhd})'		,1			%value	"TOK_FALSE"			%action default_leaf_handler			;
%token	"var"		:	'"var"(?!{keyword_lhd})'		,1			%value	"TOK_VAR"			%action default_leaf_handler			;

%token	"import"	:	'"import"(?!{keyword_lhd})'		,1			%value	"TOK_IMPORT"			%action default_leaf_handler			;


%token	"..."		:	'"..."'		,2					%value	"TOK_ELLIPSIS"		%action default_leaf_handler			;	


%token	"++"		:	'"++"'		,1						%value	"TOK_INC"			%action default_leaf_handler			;
%token	"--"		:	'"--"'		,1						%value	"TOK_DEC"			%action default_leaf_handler			;


%token	"&&"		:	'"&&"'		,1						%value	"TOK_ANDAND"			%action default_leaf_handler				;
%token	"||"		:	'"||"'		,1						%value	"TOK_OROR"			%action default_leaf_handler			;



%token	"<="		:	'"<="'		,1						%value	"TOK_LE"			%action default_leaf_handler			;
%token	">="		:	'">="'		,1						%value	"TOK_GE"			%action default_leaf_handler			;
%token	"=="		:	'"=="'		,1						%value	"TOK_EQ"			%action default_leaf_handler			;
%token	"!="		:	'"!="'		,1						%value	"TOK_NE"			%action default_leaf_handler			;
%token	"<"		:	'"<"'			,0					%value	"TOK_LESS"			%action default_leaf_handler			;
%token	">"		:	'">"'			,0					%value	"TOK_GREATER"			%action default_leaf_handler				;




%token	"{"		:	'"{"'			,0					%value	"TOK_L_BRACES"		%action default_leaf_handler			;
%token	"}"		:	'"}"'			,0					%value	"TOK_R_BRACES"		%action default_leaf_handler			;
%token	"("		:	'"("'			,0					%value	"TOK_L_PAREN"			%action default_leaf_handler			;
%token	")"		:	'")"'			,0					%value	"TOK_R_PAREN"			%action default_leaf_handler			;
%token	"["		:	'"["'			,0					%value	"TOK_L_SQUARE"		%action default_leaf_handler			;
%token	"]"		:	'"]"'			,0					%value	"TOK_R_SQUARE"		%action default_leaf_handler			;

%token	";"		:	'";"'			,0					%value	"TOK_SEMICOLON"		%action default_leaf_handler			;
%token	","		:	'","'			,0					%value	"TOK_COMMA"			%action default_leaf_handler			;
%token	"="		:	'"="'			,0					%value	"TOK_ASSIGN"			%action default_leaf_handler			;



%token	"+"		:	'"+"'			,0					%value	"TOK_ADD"			%action default_leaf_handler			;
%token	"-"		:	'"-"'			,0					%value	"TOK_SUB"			%action default_leaf_handler			;
%token	"*"		:	'"*"'			,0					%value	"TOK_MUL"			%action default_leaf_handler			;
%token	"/"		:	'"/"'			,0					%value	"TOK_DIV"			%action default_leaf_handler			;
%token	"%"		:	'"%"'			,0					%value	"TOK_MOD"			%action default_leaf_handler			;

%token	"!"		:	'"!"'			,0					%value	"TOK_NOT"			%action default_leaf_handler			;


%token	":"		:	'":"'			,0					%value	"TOK_COLON"			%action default_leaf_handler			;
%token	"?"		:	'"?"'			,0					%value	"TOK_QUEST"			%action default_leaf_handler			;


%token	"."		:	'"."'			,0					%value	"TOK_DOT"			%action default_leaf_handler			;





/**************************************************优先级*****************************************************/

%right		"?"	":"							;
%left		"||"								;
%left		"&&"								;
%left		"=="	"!="	"<"	"<="	">"	">="			;
%left		"+"	"-"							;
%left		"*"	"/"	"%"						;




/*
"if" "(" expression ")" statement "else" statement 
产生式的优先级依赖于其最右终结符或显性指定,这里就是"else"
*/
%nonassoc IF_WITHOUT_ELSE						;
%nonassoc "else"							;






/**********************************************产生式****************************************/


%start	program		;


program			:	translation_unit			%action	on_translation_unit	
				|	.					%action	on_translation_unit
				{
					tguParser_t 	*parser = (tguParser_t*)ctx;
					tguBlock_t	*result;
					AR_ASSERT(count == 0 || count == 1);
					result = parser->abs_tree;
					parser->abs_tree = NULL;
					parser->top_block = NULL;
					parser->current_function = NULL;
					AR_ASSERT(result != NULL);
					return (psrNode_t*)result;

				}
				;

translation_unit		:	element				%action	auto_return_null
				|	translation_unit	element	%action	auto_return_null
				;


element			:	declaration				%action	auto_return_null
				|	function_defination			%action	auto_return_null
				|	statement				%action	auto_return_null
				;





/**************************************function_defination***********************************************/


%code{
	
	void	start_function(tguParser_t *parser, const wchar_t *func_name, const tguParams_t	*params, const tguLexInfo_t *lex_info)
	\{
		
	\}
	
	tguFunc_t*	close_function(tguParser_t *parser)
	\{
		return NULL;
	\}
};


function_signature		:	"var"		NAME "(" params ")"						%action	on_function_signature
				{
						tguParser_t 	*parser = (tguParser_t*)ctx;
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguToken_t		name;
						tguLexInfo_t		lex_info;
						tguParams_t		*params;
						AR_ASSERT(ns[0] != NULL && ns[1] != NULL);

						lex_info = ns[0]->token.lex_info;
						name = ns[1]->token;
						if(ns[3] == NULL)
						\{
							params = NULL;
							parser->has_error = true;
						\}else
						\{
							params = ns[3]->params;
							AR_ASSERT(params != NULL);
						\}
						
						start_function(parser, name.token, params, &lex_info);
						return NULL;
				}
				;


function_defination		:	function_signature	compound_statement	%action	on_function_defination
				{
						tguParser_t 	*parser = (tguParser_t*)ctx;
						close_function(parser);
						return NULL;
				}
				;






params				:	namelist	","	"..."		%action on_namelist_ellipsis
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t	*ret;
						AR_ASSERT(nodes != NULL && count == 3);
						ns[0]->params->is_variadic = true;
						ret = ns[0];
						ns[0] = NULL;
						return ret;
				}

				|	namelist		%action	auto_return_0
				{
						psrNode_t *ret = nodes[0];
						ret  = nodes[0];
						nodes[0] = NULL;
						return ret;
				}
				|	"..."			%action	on_ellipsis
				{
						tguParams_t	*params;
						tguSynNode_t	*ret;
						AR_ASSERT(nodes != NULL && count == 1);

						params = TGU_CreateParams();
						params->is_variadic = true;
						ret = __create_synnode(TGU_NODE_PARAMS_T, (void*)params);
						return ret;
				}

				|	.			%action	NULL
				;



namelist			:	namelist	"," NAME		%action	on_name_list
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t	*ret;
						tguParams_t	*params;
						tguToken_t	tok;
						AR_ASSERT(nodes != NULL && count == 2);
						tok = ns[1]->token;
						params = ns[0]->params;
						TGU_InsertToParams(params, &tok);
						ret = ns[0];
						ns[0] = NULL;
						return ret;
				}

				|	NAME					%action	on_name
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t	*ret;
						tguParams_t	*params;
						tguToken_t	tok;
						AR_ASSERT(nodes != NULL && count == 1);
						tok = ns[0]->token;
						params = TGU_CreateParams();
						TGU_InsertToParams(params, &tok);
						ret = __create_synnode(TGU_NODE_PARAMS_T, (void*)params);
						return ret;
				}
				;








/*************************************声明语句***************************************************/


declaration				:	"var"		init_declarator_list 	semi			%action	auto_return_null
					;


init_declarator_list			:	init_declarator							%action	auto_return_null
					|	init_declarator_list "," init_declarator				%action	auto_return_null
					;



%code{
	
	static void	handle_symb_from_expression(tguParser_t 	*parser, const tguToken_t *tok, tguExpr_t *expr)
	\{

	\}
};




init_declarator			:	NAME	"=" 	expression				%action	on_declarator
					|	NAME 	"="	table_constructor			%action	on_declarator
					|	NAME							%action	on_declarator
					{
						tguParser_t 		*parser = (tguParser_t*)ctx;
						tguSynNode_t		**ns = (tguSynNode_t**)nodes;
						tguExpr_t		*expr;
						AR_ASSERT(nodes != NULL && parser != NULL && (count == 1 || count == 3));

						if(count == 1)
						\{
							/*声明了一个null类型的变量*/
							handle_symb_from_expression(parser, &ns[0]->token, NULL);
						\}else
						\{
							if(ns[2] == NULL)
							\{
								/*expression 或者 table_constructor出现错误*/
								parser->has_error = true;
								handle_symb_from_expression(parser, &ns[0]->token, NULL);
							\}else 
							\{
								expr = ns[2]->expr;
								ns[2]->expr = NULL;
								AR_ASSERT(expr != NULL);
								handle_symb_from_expression(parser, &ns[0]->token, expr);
							\}
						\}

						return NULL;
					}
					;



%code {
	static tguTableInit_t*	make_table_init(tguParser_t 	*parser, bool_t is_empty, tguTableField_t	*field_lst)
	\{
		return NULL;
	\}

};



table_constructor			:	"{"	filed_list "}"		%action	on_table_constructor
					|	"{"	"}"				%action	on_table_constructor
					|	"{" error "}"				%action	on_table_constructor
					{
						tguParser_t 	*parser = (tguParser_t*)ctx;
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t	*ret;
						tguExpr_t	*expr;
						AR_ASSERT(parser != NULL && ns != NULL);
						AR_ASSERT(count == 2 || count == 3);
						
						expr = TGU_CreateExpr(TGU_ET_TABLE_INIT);

						if(count == 2)
						\{
							/*创建了个空的表结构*/
							expr->table_init.field_lst = NULL;
						\}else
						\{
							if(ns[1] == NULL)
							\{
								parser->has_error = true;
								expr->table_init.field_lst = NULL;
							\}else
							\{
								expr->table_init.field_lst = ns[1]->field;
								ns[1]->field = NULL;
								AR_ASSERT(expr->table_init.field_lst != NULL);
							\}
						\}
						
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;

					}
					;




filed_list 				:	filed_list "," filed			%action	on_filed_list
					{
						/*tguParser_t 	*parser = (tguParser_t*)ctx;*/
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t	*ret;
						tguTableField_t *lst, *field, *tmp;

						lst = ns[0]->field; 
						field= ns[2]->field;
						ns[2]->field= NULL;
						AR_ASSERT(lst != NULL);
						
						for(tmp = lst; tmp->next != NULL; tmp = tmp->next);
						tmp->next = field;
						
						ret = ns[0];
						ns[0] = NULL;
						return ret;
					}

					|	filed						%action	auto_return_0
					;



%code {
	static tguTableField_t*	make_table_field(tguParser_t *parser, tguTableFieldType_t type, void *expr_or_field)
	\{
		return NULL;
	\}

};


filed					:	expression			%action	auto_return_0
					|	table_constructor		%action	auto_return_0
					;




/*************************************语句***************************************************/


statement				:	compound_statement			%action	auto_return_0
					|	expression_statement			%action	auto_return_0
					|	selection_statement			%action	auto_return_0
					|	iteration_statement			%action	auto_return_0
					|	jump_statement			%action	auto_return_0
					|	empty_statement			%action	auto_return_0
					|	import_statement			%action	auto_return_0
					;




/**************************************import_statement***********************************************/

/*
import会在语义分析中检测是否存在于顶层目录中，以所在文件文件名当做符号插入到顶层块中
*/
import_statement		:	"import"	STRING	";"		%action	on_import_statement
				|	"import"	error 	";"		%action	on_import_statement
				{
					tguParser_t 	*parser = (tguParser_t*)ctx;
					tguSynNode_t	**ns = (tguSynNode_t**)nodes;
					AR_ASSERT(parser != NULL);
					TGU_ReportWarning(&parser->report, L"", ns[0]->token.lex_info.linenum);
					return NULL;
				}
				;



/**************************************compound_statement*****************************/


%code block_operation{
	static void push_block(tguParser_t *parser)
	\{
	\}

	static tguBlock_t* pop_block(tguParser_t *parser)
	\{
		return NULL;
	\}	

	tguStmt_t*		make_compound_stmt(tguParser_t 	*parser, tguBlock_t		*block, const tguLexInfo_t *start, const tguLexInfo_t *end)
	\{
		return NULL;
	\}
};



compound_statement		:	start_block	compound_element_list		"}"		%action	on_compound_statement
				{
					tguParser_t 	*parser = (tguParser_t*)ctx;
					tguSynNode_t	**ns = (tguSynNode_t**)nodes;
					tguSynNode_t	*ret;
					tguBlock_t		*cb = NULL;
					tguStmt_t *stmt;
						
					AR_ASSERT(nodes != NULL && (count == 2));
					cb = pop_block(parser);
						
					stmt = make_compound_stmt(parser, cb, &ns[0]->token.lex_info,&ns[1]->token.lex_info);
					ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
					return ret;
				}

				|	start_block  	error  				"}"		%action	on_compound_error_statement
				{
						tguParser_t 	*parser = (tguParser_t*)ctx;
						/*tguSynNode_t	**ns = (tguSynNode_t**)nodes;*/
						tguBlock_t		*cb = NULL;
						AR_ASSERT(nodes != NULL && (count == 2));
						AR_ASSERT(parser != NULL);
						parser->has_error = true;
						cb = pop_block(parser);
						TGU_DestroyBlock(cb);
						return NULL;
				}

				|	"{" 								"}"		%action	on_empty_compound_statement
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t	*ret;
						tguStmt_t *stmt;
						tguParser_t	*parser = (tguParser_t*)ctx;
						AR_ASSERT(ns != NULL && count == 1);
						AR_ASSERT(parser != NULL);
						stmt = make_compound_stmt(parser, NULL, &ns[0]->token.lex_info,&ns[1]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
						
				}
				;




start_block			:	"{"		%action	on_start_block
				{
							tguParser_t 	*parser = (tguParser_t*)ctx;
							tguSynNode_t	**ns = (tguSynNode_t**)nodes;
							tguSynNode_t	*ret;
							AR_ASSERT(ns != NULL && count == 1);
							ret = ns[0]; 
							ns[0] = NULL;
							push_block(parser);
							return ret;
				}
				;








compound_element_list		:	compound_element_list		compound_element	%action	auto_return_null
					|	compound_element						%action	auto_return_null
					{
						return NULL;
					}
					;






compound_element		:	statement		%action	on_compound_element
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						AR_ASSERT(ns != NULL && count == 1 && ns[0]->type == TGU_NODE_STMT_T);
						if(ns[0] == NULL)
						\{
								parser->has_error = true;
								return NULL;
						\}
						

						AR_ASSERT(ns[0]->stmt);
						TGU_InsertStmtToBlock(parser->top_block, ns[0]->stmt);
						ns[0]->stmt = NULL;
						return NULL;
				}

				|	declaration		%action	auto_return_null
				;





/*****************************************************************************/

%code {
	static tguStmt_t*	make_empty_statement(tguParser_t *parser, const tguLexInfo_t *lex_info)
	\{
		return NULL;
	\}

};


empty_statement			:	";"		%action	on_empty_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t 	*ret;
						tguStmt_t		*stmt;
						AR_ASSERT(ns != NULL && parser != NULL && count == 1);

						stmt = make_empty_statement(parser, &ns[0]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
					}
					;


expression_statement			:	expression	 semi		%action on_expression_statement
					{
						return NULL;
					}
					;





selection_statement			:	if_statement		%action auto_return_0
					|	if_else_statement	%action auto_return_0
					;


%code	{
	static tguStmt_t*	make_if_statement(tguParser_t *parser, tguExpr_t *cond, tguStmt_t *if_true, tguStmt_t *if_false, const tguLexInfo_t *lex_info)
	\{
		return NULL;
	\}

};


if_statement			:	"if" "(" expression ")" statement			%prec IF_WITHOUT_ELSE		%action on_if_statement
				|	"if" "(" error ")" statement				%prec IF_WITHOUT_ELSE		%action on_if_statement
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*if_true, *stmt;
						AR_ASSERT(ns != NULL && count == 5);
						
						if(ns[2] == NULL)
						\{
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[2]->expr;
							ns[2]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}
							
						if(ns[4] == NULL)
						\{	
							if_true = NULL;
							parser->has_error = true;
						\}else
						\{
							if_true = ns[4]->stmt;
							ns[4]->stmt = NULL;
							AR_ASSERT(if_true != NULL);
						\}

						stmt = make_if_statement(parser, expr, if_true, NULL, &ns[0]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
				}
				;


if_else_statement		:	"if" "(" expression ")" statement "else" statement	%action on_if_else_statement
				|	"if" "(" error ")" statement "else" statement		%action on_if_else_statement
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*if_true;
						tguStmt_t		*if_false;
						tguStmt_t		*stmt;
						AR_ASSERT(ns != NULL && count == 7);
						if(ns[2] == NULL)
						\{
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[2]->expr;
							ns[2]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}
							
						if(ns[4] == NULL)
						\{	
							if_true = NULL;
							parser->has_error = true;
						\}else
						\{
							if_true = ns[4]->stmt;
							ns[4]->stmt = NULL;
							AR_ASSERT(if_true != NULL);
						\}

						if(ns[6] == NULL)
						\{	
							if_false = NULL;
							parser->has_error = true;
						\}else
						\{
							if_false = ns[6]->stmt;
							ns[6]->stmt = NULL;
							AR_ASSERT(if_false != NULL);
						\}


						stmt = make_if_statement(parser, expr, if_true, if_false,  &ns[0]->token.lex_info);	
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
				}
				;


iteration_statement		:	while_statement			%action	auto_return_0
				|	do_while_statement			%action	auto_return_0
				|	for_statement				%action	auto_return_0
				;






%code {
	static tguStmt_t*	make_while_statement(tguParser_t *parser, tguExpr_t *cond, tguStmt_t *loop, const tguLexInfo_t *lex_info)
	\{
		return NULL;
	\}

	static tguStmt_t*	make_do_while_statement(tguParser_t *parser, tguExpr_t *cond, tguStmt_t *loop, const tguLexInfo_t *lex_info)
	\{
		return NULL;
	\}

};






while_statement			:	"while" enter_loop  "(" expression ")" statement leave_loop	%action	on_while_statement
					|	"while" enter_loop  "(" error ")" statement leave_loop		%action	on_while_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*stmt;
						AR_ASSERT(ns != NULL && count == 7);
						if(ns[3] == NULL)
						\{
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[3]->expr;
							ns[3]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}
							
						if(ns[5] == NULL)
						\{	
							stmt = NULL;
							parser->has_error = true;
						\}else
						\{
							stmt = ns[5]->stmt;
							ns[5]->stmt = NULL;
							AR_ASSERT(stmt != NULL);
						\}

						stmt = make_while_statement(parser, expr, stmt, &ns[0]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
					}
					;



do_while_statement			:	"do" enter_loop statement "while" "(" expression ")" leave_loop semi			%action	on_do_while_statement
					|	"do" enter_loop statement "while" "(" error ")" leave_loop semi				%action	on_do_while_statement
					{
						tguSynNode_t	**ns = 	(tguSynNode_t**)nodes;
						tguParser_t	*parser =	(tguParser_t*)ctx;
						tguSynNode_t	*ret;
						tguExpr_t		*expr;
						tguStmt_t		*stmt;
						AR_ASSERT(ns != NULL && count == 9);
						if(ns[2] == NULL)
						\{
							stmt = NULL;
							parser->has_error = true;
						\}else
						\{
							stmt = ns[2]->stmt;
							ns[2]->stmt = NULL;
							AR_ASSERT(stmt != NULL);
						\}
							
						if(ns[5] == NULL)
						\{	
							expr = NULL;
							parser->has_error = true;
						\}else
						\{
							expr = ns[5]->expr;
							ns[5]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}

						stmt = make_do_while_statement(parser, expr, stmt, &ns[0]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
					}
					;


%code {
	
	static tguStmt_t*	make_for_statement(tguParser_t *parser, tguExpr_t *init, tguExpr_t *cond, tguExpr_t *step, tguStmt_t *loop, const tguLexInfo_t *lex_info)
	\{
		return NULL;
	\}
	

};


for_statement			:	"for"	"("	for_expression	";"	for_expression	";"	for_expression	")"	enter_loop  statement leave_loop	%action	on_for_statement
				|	"for"	"("	error	")"	enter_loop  statement leave_loop	%action	on_for_statement
				{
						tguSynNode_t		**ns = (tguSynNode_t**)nodes;
						tguParser_t		*parser = (tguParser_t*)ctx;
						tguSynNode_t		*ret;
						tguExpr_t		*init, *cond, *step;
						tguStmt_t		*loop;
						tguStmt_t		*stmt;

						AR_ASSERT(ns != NULL && count == 11);

						if(ns[2] == NULL)
						\{
							init = NULL;
						\}else
						\{
							init = ns[2]->expr;
							ns[2]->expr = NULL;
							AR_ASSERT(init != NULL);
						\}

						if(ns[4] == NULL)
						\{
							cond = NULL;
						\}else
						\{
							cond = ns[4]->expr;
							ns[4]->expr = NULL;
							AR_ASSERT(cond != NULL);
						\}
						

						if(ns[6] == NULL)
						\{
							step = NULL;
						\}else
						\{
							step = ns[6]->expr;
							ns[6]->expr = NULL;
							AR_ASSERT(step != NULL);
						\}

						if(ns[9] == NULL)
						\{
							loop = NULL;
							parser->has_error = true;
						\}else
						\{
							loop = ns[9]->stmt;
							ns[9]->stmt = NULL;
							AR_ASSERT(loop != NULL);
						\}

						stmt = make_for_statement(parser, init, cond, step, loop, &ns[0]->token.lex_info);
						
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
				}
				;

for_expression		:	expression_list	%action	auto_return_0
				|	.			%action	auto_return_0
				;





enter_loop				:	.					%action on_enter_loop
					{
						tguParser_t	*parser = NULL;
						AR_ASSERT(ctx != NULL);
						parser = (tguParser_t*)ctx;
						parser->loop_level++;
						return NULL;
					}
					;


leave_loop				:	.					%action on_leave_loop
					{
						tguParser_t	*parser = NULL;
						AR_ASSERT(ctx != NULL);
						parser = (tguParser_t*)ctx;
						AR_ASSERT(parser->loop_level > 0);
						parser->loop_level--;
						return NULL;
					}
					;






%code{
	static tguStmt_t*	make_jump_statement(tguParser_t *parser, tguStmtType_t type, tguExpr_t *expr, const tguLexInfo_t *lex_info)
	\{
		return NULL;
	\}
};


jump_statement			:	"continue" semi				%action on_continue_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguStmt_t		*stmt;
						tguParser_t	*parser = (tguParser_t*)ctx;
						stmt = make_jump_statement(parser, TGU_STT_CONTINUE, 	NULL, &ns[0]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;

					}

					|	"break" 	semi				%action on_break_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguStmt_t		*stmt;
						tguParser_t	*parser = (tguParser_t*)ctx;
						ret = AR_NEW(tguSynNode_t);
						ret->type = TGU_NODE_STMT_T;
						stmt = make_jump_statement(parser, TGU_STT_BREAK, 	NULL, &ns[0]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
						
					}

					|	"return" 	semi				%action on_return_statement
					|	"return" 	expression semi		%action on_return_statement
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguExpr_t		*expr;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguStmt_t		*stmt;
						AR_ASSERT(nodes != NULL && (count == 2 || count == 3));
						AR_ASSERT(parser->current_function != NULL);
						
						if(count == 2)
						\{
							expr = NULL;
						\}else
						\{
							if(ns[1] == NULL)
							\{
								expr = NULL;
								parser->has_error = true;
							\}else
							\{
								AR_ASSERT(ns[1]->type == TGU_NODE_EXPR_T);
								expr = ns[1]->expr;
								ns[1]->expr = NULL;
								AR_ASSERT(expr != NULL);
							\}
						\}

						stmt = make_jump_statement(parser, TGU_STT_RETURN, 	expr, &ns[0]->token.lex_info);
						ret = __create_synnode(TGU_NODE_STMT_T, (void*)stmt);
						return ret;
					}
					;




semi					:	";"								%action	auto_return_0
					|	error								%action	on_semi_error
					{
						tguParser_t	*parser = (tguParser_t*)ctx;
						AR_ASSERT(parser != NULL);
						parser->has_error = true;
						return NULL;
					}
					;


/*****************************************表达式*********************************************/


%code{
	static bool_t check_is_lvalue(const tguExpr_t *expr, tguParser_t *parser)
	\{
		return false;
	\}

	static bool_t check_is_constant(const tguExpr_t *expr, tguParser_t *parser)
	\{
		return false;
	\}
};


expression				:	assignment_expression		%action auto_return_0
					;



%code {
	static tguExpr_t*		make_assignment_expression(tguParser_t	*parser, 	tguExpr_t *addr, tguExpr_t *value, const tguLexInfo_t *lex_info)
	\{
			return NULL;
	\}

};



assignment_expression		:	constant_expression							%action 	auto_return_0
					|	unary_expression	"="	table_constructor		%action	on_assignment_expression
					|	unary_expression	"="	assignment_expression		%action	on_assignment_expression
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*addr, *value, *expr;
						const tguLexInfo_t *lex_info; 
						AR_ASSERT(ns != NULL && count == 3 && parser != NULL);

						if(ns[0] == NULL)
						\{
							parser->has_error = true;
							addr = NULL;	
						\}else
						\{
							addr = ns[0]->expr;
							ns[0]->expr = NULL;
							AR_ASSERT(addr != NULL);
						\}
						

						if(ns[2] == NULL)
						\{
							parser->has_error = true;
							value = NULL;	
						\}else
						\{
							value = ns[2]->expr;
							ns[2]->expr = NULL;
							AR_ASSERT(value != NULL);
						\}

						lex_info = addr != NULL ? &addr->lex_info : &ns[1]->token.lex_info;
						AR_ASSERT(lex_info != NULL);
						expr = make_assignment_expression(parser, addr, value, lex_info);
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);

						return ret;

					}
					;




%code {
	static tguExpr_t*		make_condition_expression(tguParser_t	*parser, 	tguExpr_t *cond, tguExpr_t *if_true, tguExpr_t *if_false, const tguLexInfo_t *lex_info)
	\{
			return NULL;
	\}

};


constant_expression			:	binary_expression									%action 	auto_return_0
					|	binary_expression	"?"	expression	":"	constant_expression		%action	on_condition_expression
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*cond, *if_true, *if_false, *expr;
						const tguLexInfo_t *lex_info;
						AR_ASSERT(ns != NULL && count == 3 && parser != NULL);

						if(ns[0] == NULL)
						\{
							parser->has_error = true;
							cond= NULL;	
						\}else
						\{
							cond = ns[0]->expr;
							ns[0]->expr = NULL;
							AR_ASSERT(cond != NULL);
						\}

						

						if(ns[2] == NULL)
						\{
							parser->has_error = true;
							if_true = NULL;	
						\}else
						\{
							if_true= ns[2]->expr;
							ns[2]->expr = NULL;
							AR_ASSERT(if_true != NULL);
						\}
						
						if(ns[4] == NULL)
						\{
							parser->has_error = true;
							if_false = NULL;	
						\}else
						\{
							if_false= ns[4]->expr;
							ns[4]->expr = NULL;
							AR_ASSERT(if_false != NULL);
						\}

						lex_info = cond != NULL ? &cond->lex_info : &ns[1]->token.lex_info;
						AR_ASSERT(lex_info != NULL);
						expr = make_condition_expression(parser, cond, if_true, if_false, lex_info);
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;


					}
					;



%code {
	static tguExpr_t*		make_binary_expression(tguParser_t	*parser, 	tguExprOP_t op, tguExpr_t *left, tguExpr_t *right, const tguLexInfo_t *lex_info)
	\{
			return NULL;
	\}
};

binary_expression			:	unary_expression							%action 	auto_return_0
					|	binary_expression	"+"	binary_expression		%action	on_binary_expression
					|	binary_expression	"-"	binary_expression		%action	on_binary_expression
					|	binary_expression	"*"	binary_expression		%action	on_binary_expression
					|	binary_expression	"/"	binary_expression		%action	on_binary_expression
					|	binary_expression	"%"	binary_expression		%action	on_binary_expression
					|	binary_expression	"<"	binary_expression		%action	on_binary_expression
					|	binary_expression	"<="	binary_expression		%action	on_binary_expression
					|	binary_expression	">"	binary_expression		%action	on_binary_expression
					|	binary_expression	">="	binary_expression		%action	on_binary_expression
					|	binary_expression	"=="	binary_expression		%action	on_binary_expression
					|	binary_expression	"!="	binary_expression		%action	on_binary_expression
					|	binary_expression	"&&"	binary_expression		%action	on_binary_expression
					|	binary_expression	"||"	binary_expression		%action	on_binary_expression
					{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*left, *right, *expr;

						tguExprOP_t	op;
						const tguLexInfo_t *lex_info;
						tguToken_t	tok;
						AR_ASSERT(ns != NULL && count == 3 && parser != NULL);

						if(ns[0] == NULL)
						\{
							parser->has_error = true;
							left = NULL;	
						\}else
						\{
							left = ns[0]->expr;
							ns[0]->expr = NULL;
							AR_ASSERT(left != NULL);
						\}

						AR_ASSERT(ns[1] != NULL);
						tok = ns[1]->token;


						if(ns[2] == NULL)
						\{
							parser->has_error = true;
							right = NULL;	
						\}else
						\{
							right = ns[2]->expr;
							ns[2]->expr = NULL;
							AR_ASSERT(right != NULL);
						\}

						switch(tok.term_val)
						\{
						case TOK_INC:
							op = TGU_OP_PLUS;
							break;
						case TOK_SUB :
							op = TGU_OP_MINUS;
							break;
						case TOK_MUL:
							op = TGU_OP_MUL;
							break;
						case TOK_DIV:
							op = TGU_OP_DIV;
							break;
						case TOK_MOD:
							op = TGU_OP_MOD;
							break;
						case TOK_LESS:
							op = TGU_OP_LESS;
							break;
						case TOK_LE:
							op = TGU_OP_LESS_OR_EQUAL;
							break;
						case TOK_GREATER:
							op = TGU_OP_GREATER;
							break;
						case TOK_GE:
							op = TGU_OP_GREATER_OR_EQUAL;
							break;
						case TOK_EQ:
							op = TGU_OP_IS_EQUAL;
							break;
						case TOK_NE:
							op = TGU_OP_NOT_EQUAL;
							break;
						case TOK_ANDAND:
							op = TGU_OP_LOGICAL_AND;
							break;
						case TOK_OROR:
							op = TGU_OP_LOGICAL_OR;
							break;
						default:
							op = TGU_OP_NONE;/*op如果在此不赋值会导致一个warning*/
							AR_ASSERT(false);
							break;
						\}

						lex_info  = left != NULL ? &left->lex_info : &tok.lex_info;
						AR_ASSERT(lex_info != NULL);
						expr = make_binary_expression(parser, op, left, right, lex_info);
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;
					}
					;


%code {
	static tguExpr_t*		make_unary_expression(tguParser_t	*parser, 	tguExprOP_t op, tguExpr_t *expr, bool_t is_lvalue, const tguLexInfo_t *lex_info)
	\{
			return NULL;
	\}
	
	static tguExpr_t*	make_index_expression(tguParser_t *parser, tguExpr_t *expr, tguExpr_t *index_expr, const tguLexInfo_t *lex_info)
	\{	
		return NULL;
	\}


	static tguExpr_t*		make_identifier_expression(tguParser_t	*parser, 	tguToken_t *token)
	\{
		return NULL;
	\}


	static tguExpr_t*		make_constant_expression(tguParser_t	*parser, 		tguToken_t *token)
	\{
			tguExpr_t 	*ret;
			tguSymb_t	*symb;
			AR_ASSERT(parser != NULL && token != NULL); 
			
			ret = NULL;
			symb = NULL;

			switch(token->term_val)
			\{
			default:
				AR_ASSERT(false);
				break;
			case TOK_NULL:
				break;
			case TOK_TRUE:
				break;
			case TOK_FALSE:
				break;
			case TOK_STRING:
				break;
			case TOK_FLOAT_NUMBER:
				break;
			case TOK_INT_NUMBER:
				break;
			\}

			return ret;
	\}
};




unary_expression		:	"+"	unary_expression	%action	on_unary_expression
				|	"-"	unary_expression	%action	on_unary_expression
				|	"!"	unary_expression	%action	on_unary_expression
				|	"++" 	unary_expression	%action	on_unary_expression
				|	"--"	unary_expression	%action	on_unary_expression
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr;

						tguExprOP_t		op;
						tguToken_t		tok;
						const tguLexInfo_t	*lex_info;
						AR_ASSERT(ns != NULL && count == 2 && parser != NULL);

						if(ns[1] == NULL)
						\{
							parser->has_error = true;
							expr = NULL;	
						\}else
						\{
							expr = ns[1]->expr;
							ns[1]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}

						AR_ASSERT(ns[0] != NULL);
						tok = ns[0]->token;	
						
						switch(tok.term_val)
						\{
						case TOK_INC:
							op = TGU_OP_PREINC;
							break;
						case TOK_DEC:
							op = TGU_OP_PREDEC;
							break;
						case TOK_ADD:
							op = TGU_OP_UNARY_PLUS;
							break;
						case TOK_SUB:
							op = TGU_OP_UNARY_MINUS;
							break;
						case TOK_NOT:
							op = TGU_OP_LOGICAL_NOT;
							break;
						default:
							op = TGU_OP_NONE;
							AR_ASSERT(false);
							break;
						\}
						lex_info = expr != NULL ? &expr->lex_info : &tok.lex_info;
						expr = make_unary_expression(parser, op, expr, false, lex_info);
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;

				}

				|	postfix_expression		%action 	auto_return_0
				;



postfix_expression		:	postfix_expression	"++"		%action	on_post_add_minus_expression
				|	postfix_expression	"--"		%action	on_post_add_minus_expression
				{
						tguSynNode_t		**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 		*ret;
						tguParser_t		*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr;
						tguToken_t		tok;
						tguExprOP_t		op;
						const tguLexInfo_t	*lex_info; 

						AR_ASSERT(ns != NULL && count == 2 && parser != NULL);

						if(ns[0] == NULL)
						\{
							parser->has_error = true;
							expr = NULL;	
						\}else
						\{
							expr = ns[0]->expr;
							ns[0]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}

						AR_ASSERT(ns[1] != NULL );
						tok = ns[1]->token;	
							
						switch(tok.term_val)	
						\{
						case TOK_INC:
							op = TGU_OP_POSTINC;
							break;
						case TOK_DEC:
							op = TGU_OP_POSTDEC;
							break;
						default:
							op = TGU_OP_NONE;
							AR_ASSERT(false);
							break;
						\}
						
						lex_info = expr != NULL ? &expr->lex_info : &tok.lex_info;
						expr = make_unary_expression(parser, op, expr, false, lex_info);
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;
				}

				|	postfix_expression "[" expression "]"		%action	on_index_expression
				|	postfix_expression "[" error "]"			%action	on_index_expression
				{
					
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr, *index_expr;
						const tguLexInfo_t	*lex_info;
						AR_ASSERT(ns != NULL && count == 4 && parser != NULL);

						if(ns[0] == NULL)
						\{
							parser->has_error = true;
							expr = NULL;
						\}else
						\{
							expr = ns[0]->expr;
							ns[0]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}

						if(ns[2] == NULL)
						\{
							index_expr = NULL;
							parser->has_error = true;
						\}else
						\{
							index_expr = ns[2]->expr;
							ns[2]->expr = NULL;
							AR_ASSERT(index_expr != NULL);
						\}

						lex_info = expr != NULL ? &expr->lex_info : &ns[1]->token.lex_info;
						expr = make_index_expression(parser, expr, index_expr, lex_info);
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;
				}
				|	postfix_expression 	"."	NAME	%action	on_access_name_expression
				{
						tguSynNode_t		**ns = (tguSynNode_t**)nodes;
						tguSynNode_t		*ret;
						tguParser_t		*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr, *index_expr;
						tguToken_t		tmp;
						wchar_t		*buf;
						const tguLexInfo_t	*lex_info;
						AR_ASSERT(ns != NULL && count == 4 && parser != NULL);

						if(ns[0] == NULL)
						\{
							parser->has_error = true;
							expr = NULL;
						\}else
						\{
							expr = ns[0]->expr;
							ns[0]->expr = NULL;
							AR_ASSERT(expr != NULL);
						\}

						tmp = ns[2]->token;
						tmp.term_val = TOK_STRING;
						buf = AR_NEWARR(wchar_t, AR_wcslen(ns[2]->token.token) + 2 + 1);
						buf[0] = L'\0';
						AR_wcscat(buf, L"\"");
						AR_wcscat(buf, ns[2]->token.token);
						AR_wcscat(buf, L"\"");
						tmp.token = buf;
						index_expr = make_constant_expression(parser, &tmp);
						AR_ASSERT(index_expr != NULL);
						tmp.token = NULL;
						AR_DEL(buf);
						buf = NULL;

						lex_info = expr != NULL ? &expr->lex_info : &index_expr->lex_info;
						expr = make_index_expression(parser, expr, index_expr, lex_info);
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;
				}

				|	call_expression				%action auto_return_0
				|	primary_expression				%action auto_return_0
				;	
				




primary_expression		:	"(" expression")"							%action	on_lp_rp_expression
				|	"(" error ")"								%action	on_lp_rp_expression
				{
					tguParser_t	*parser = (tguParser_t*)ctx;
					psrNode_t 	*ret;
					if(nodes[1] == NULL)
					\{
						parser->has_error = true;
						ret = NULL;
					\}else
					\{
						ret = nodes[1];
						nodes[1] = NULL;
					\}
					return ret;
				}

				|	NAME										%action	on_identifier_expression
				{
						tguSynNode_t		**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 		*ret;
						tguParser_t		*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr;
						AR_ASSERT(parser != NULL && ns != NULL && count == 1);
						expr = make_identifier_expression(parser, &ns[0]->token);
						
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;

				}

				|	FLOAT_NUMBER			%action	on_constant_expression
				|	INT_NUMBER			%action	on_constant_expression
				|	STRING				%action	on_constant_expression
				|	"true"				%action	on_constant_expression
				|	"false"			%action	on_constant_expression
				|	"null"				%action	on_constant_expression
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 	*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr;
						AR_ASSERT(parser != NULL && ns != NULL && count == 1);
						expr = make_constant_expression(parser, &ns[0]->token);
						
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;
				}
				;





/*辅助函数*/
%code {
	static tguExpr_t*		make_call_expression(tguParser_t	*parser, tguExpr_t *call_expr, tguExpr_t *args, const tguLexInfo_t *lex_info)
	\{
			tguExpr_t *expr;
			AR_ASSERT(parser != NULL && lex_info != NULL);

			expr = TGU_CreateExpr(TGU_ET_FUNC_CALL);
			expr->is_lvalue = false;
			expr->is_constant = false;
			expr->lex_info = *lex_info;
			
			expr->func_call_expr.func_call = call_expr;
			expr->func_call_expr.arg_list = args;
			return expr;
	\}
};


call_expression		:	postfix_expression "(" expression_list ")"		%action	on_call_expression
				|	postfix_expression "(" error ")"				%action	on_call_expression
				|	postfix_expression "(" 	")"				%action	on_call_expression
				{
						tguSynNode_t		**ns = (tguSynNode_t**)nodes;
						tguSynNode_t 		*ret;
						tguParser_t	*parser = (tguParser_t*)ctx;
						tguExpr_t		*expr, *call_expr, *args;
						const tguLexInfo_t	*lex_info;

						/*如果postfix_expression 为空，则表明此call表达式错误*/
						if(ns[0] == NULL)				
						\{
							parser->has_error = true;
							call_expr = NULL;
						\}else
						\{
							call_expr= ns[0]->expr;
							ns[0]->expr = NULL;
						\}


						if(count == 4)
						\{
							if(ns[2] == NULL)/*对应"(" error ")"*/
							\{
								args = NULL;
								parser->has_error = true;
							\}else
							\{
								args = ns[2]->expr;
								ns[2]->expr = NULL;
								AR_ASSERT(args != NULL);
							\}
						\}else
						\{
						
							AR_ASSERT(count == 3);
							args = NULL;
						\}
						
						lex_info = call_expr != NULL ? &call_expr->lex_info : &ns[1]->token.lex_info;
						expr = make_call_expression(parser, call_expr, args, lex_info );
						
						ret = __create_synnode(TGU_NODE_EXPR_T, (void*)expr);
						return ret;
				}
				;




expression_list		:	expression					%action	auto_return_0
				|	expression_list "," expression		%action	on_expression_list
				{
						tguSynNode_t	**ns = (tguSynNode_t**)nodes;
						tguSynNode_t	*ret;
						tguExpr_t		*lst;
						AR_ASSERT(ns != NULL && count == 3);
						if(ns[0] == NULL) return ns[2];
						if(ns[2] == NULL) return ns[0];
						AR_ASSERT(ns[0]->expr != NULL  && ns[2]->expr != NULL);

						for(lst = ns[0]->expr; lst->next != NULL; lst = lst->next);
						
						lst->next = ns[2]->expr;
						ns[2]->expr = NULL;
						ret = ns[0];
						ns[0] = NULL;
						return ret;
				}
				;

