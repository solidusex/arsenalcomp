/* * Copyright (c) 2011 by Solidus * This file is part of Arsenal library tools source code. * * Permission to use, copy, modify, distribute and sell this software * and its documentation for any purpose is hereby granted without fee, * provided that the above copyright notice appear in all copies and * that both that copyright notice and this permission notice appear * in supporting documentation.It is provided "as is" without express  * or implied warranty. * */#import "GrammarDesignerDocument.h"@implementation GrammarDesignerDocument- (id)init{		DLog(@"On GrammarDesignerDocument::init");		self = [super init];		if (self) {				grammarContent = [[NSString alloc] init];				// Add your subclass-specific initialization here.				// If an error occurs here, send a [self release] message and return nil.    		}		return self;}#if(0)- (BOOL)readFromURL:(NSURL *)absoluteURL ofType:(NSString *)typeName error:(NSError **)outError{		DLog(@"GrammarDesignerDocument::readFromURL forUlr : %@ typeName : %@", [absoluteURL path], typeName);				arString_t *text = NULL;				const wchar_t *path = [ARUtility convertNSStringToUTF32 : [absoluteURL path]];				text = AR_CreateString();				if(path == NULL || !AR_LoadBomTextFile(path,NULL, text))		{				if(outError)				{						*outError = [NSError errorWithDomain : NSFilePathErrorKey														code : 0													userInfo : nil									 ];				}				AR_DestroyString(text);				text = NULL;				return NO;						}				[grammarContent release];		grammarContent = [ARUtility convertUTF32ToNSString : AR_GetStringCString(text)];		[grammarContent retain];				DLog(@"%@", grammarContent);		//NSRunAlertPanel(@"Test", grammarContent, @"OK", nil,nil);				AR_DestroyString(text);		text = NULL;				[self setFileURL : absoluteURL];		return YES;}#endif- (NSData *)dataOfType:(NSString *)typeName error:(NSError **)outError{		return [grammarContent dataUsingEncoding : NSUTF8StringEncoding];}- (BOOL)readFromData:(NSData *)data ofType:(NSString *)typeName error:(NSError **)outError{		BOOL ret = YES;		DLog(@"data length == %d", [data length]);				size_t len = [data length];				if(len > 0)		{				arBuffer_t *buf = AR_CreateBuffer(len);				arString_t *str = AR_CreateString();				AR_InsertBuffer(buf, (const byte_t*)[data bytes], len);								if(AR_LoadBomTextFromBinary(buf, NULL, str))				{												[grammarContent release];						grammarContent = [ARUtility convertUTF32ToNSString : AR_GetStringCString(str)];						[grammarContent retain];						DLog(@"%@", grammarContent);						ret = YES;										}else				{						ret = NO;						if(outError)						{								*outError = [NSError errorWithDomain : NSFilePathErrorKey																code : 0															userInfo : nil											 ];						}				}								AR_DestroyBuffer(buf);				AR_DestroyString(str);				buf = NULL;				str = NULL;						}else		{				[grammarContent release];				grammarContent = [[NSString alloc ]init];				ret = YES;		}						return ret;}- (NSString *)windowNibName{    // Override returning the nib file name of the document    // If you need to use a subclass of NSWindowController or if your document supports multiple NSWindowControllers, you should remove this method and override -makeWindowControllers instead.    return @"GrammarDesignerDocument";}- (void)windowControllerDidLoadNib:(NSWindowController *) aController{    [super windowControllerDidLoadNib:aController];    // Add any code here that needs to be executed once the windowController has loaded the document's window.}-(void)reloadPreferences{		DLog(@"GrammarDesignerDocument :: reloadPreferences");}/***************************************************Action********************************/-(IBAction)setDocumentLexerSingleLine : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentLexerSingleLine");}-(IBAction)setDocumentLexerIgnoreCase : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentLexerIgnoreCase");}-(IBAction)setDocumentParserModeSLR : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentParserModeSLR");}-(IBAction)setDocumentParserModeLALR : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentParserModeLALR");}-(IBAction)buildDocumentParser	:	(id)sender{		DLog(@"On GrammarDesignerDocument::buildDocumentParser");}-(IBAction)parseDocumentInput	:	(id)sender{		DLog(@"On GrammarDesignerDocument::parseDocumentInput");}-(IBAction)rebuildDocumentTags	:	(id)sender{		DLog(@"On GrammarDesignerDocument::rebuildDocumentTags");}-(IBAction)generateDocumentGrammarTemplateCode : (id)sender{		DLog(@"On GrammarDesignerDocument::generateDocumentGrammarTemplateCode");}@end