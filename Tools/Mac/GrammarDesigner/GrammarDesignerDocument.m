/* * Copyright (c) 2011 by Solidus * This file is part of Arsenal library tools source code. * * Permission to use, copy, modify, distribute and sell this software * and its documentation for any purpose is hereby granted without fee, * provided that the above copyright notice appear in all copies and * that both that copyright notice and this permission notice appear * in supporting documentation.It is provided "as is" without express  * or implied warranty. * */#import "GrammarDesignerDocument.h"@implementation GrammarDesignerDocument/****************************Internal************************/-(void)load_font_config{		DLog(@"GrammarDesignerDocument::load_font_config");		[grammarFont release];		[inputFont release];		[tagsFont release];		[treeViewFont release];		[consoleFont release];						NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];				NSString *name;		NSInteger size;								name = [defaults stringForKey : PREFERENCE_FONT_GRAMMAR_NAME];		size = (NSInteger)[defaults doubleForKey : PREFERENCE_FONT_GRAMMAR_SIZE];		grammarFont = [NSFont fontWithName : name									  size : size					   ];		[grammarFont retain];								name = [defaults stringForKey : PREFERENCE_FONT_INPUT_NAME];		size = (NSInteger)[defaults doubleForKey : PREFERENCE_FONT_INPUT_SIZE];				inputFont = [NSFont fontWithName : name									  size : size					   ];				[inputFont retain];						name = [defaults stringForKey : PREFERENCE_FONT_TAGS_NAME];		size = (NSInteger)[defaults doubleForKey : PREFERENCE_FONT_TAGS_SIZE];		tagsFont = [NSFont fontWithName : name									  size : size					   ];		[tagsFont retain];				name = [defaults stringForKey : PREFERENCE_FONT_TREEVIEW_NAME];		size = (NSInteger)[defaults doubleForKey : PREFERENCE_FONT_TREEVIEW_SIZE];		treeViewFont = [NSFont fontWithName : name									  size : size					   ];		[treeViewFont retain];				name = [defaults stringForKey : PREFERENCE_FONT_CONSOLE_NAME];		size = (NSInteger)[defaults doubleForKey : PREFERENCE_FONT_CONSOLE_SIZE];		consoleFont = [NSFont fontWithName : name									  size : size					   ];		[consoleFont retain];		}-(void)load_default_config{		DLog(@"GrammarDesignerDocument::load_default_config");		NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];						NSInteger interval = (NSInteger)[defaults doubleForKey : PREFERENCE_BUILD_TAGS_INTERVAL];		[self on_reset_timer : interval];								NSInteger paser_mode = (NSInteger)[defaults doubleForKey : PREFERENCE_PARSER_MODE];		parserMode = (psrLRItemType_t)paser_mode;				lexIsSingleLine = [defaults boolForKey : PREFERENCE_LEX_IS_SINGLELINE];		lexIsIgnoreCase = [defaults boolForKey : PREFERENCE_LEX_IS_IGNORECASE];				[self load_font_config];								}-(void)on_reset_timer : (NSInteger)milliseconds{		DLog(@"GrammarDesignerDocument::on_reset_timer");		if(grammarCheckTimer != nil)		{				[grammarCheckTimer invalidate];				//[grammarCheckTimer release];				grammarCheckTimer = nil;		}				if(milliseconds > 0)		{												grammarCheckTimer = [NSTimer scheduledTimerWithTimeInterval	 : (double)milliseconds / 1000.0																	  target : self																	selector : @selector(onGrammarChecker:)																	userInfo : nil																	 repeats : YES									 ];								//[grammarCheckTimer retain];										}		}-(void)reset_view_font{		DLog(@"GrammarDesignerDocument::reset_view_font");}/****************************Initialize************************/- (id)init{		DLog(@"GrammarDesignerDocument::init");		self = [super init];		if (self) {								grammarContent = [[NSString alloc] init];								NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];				[nc addObserver : self					   selector : @selector(handleParserChanged:)						   name : NOTIFICATION_PREFERENCE_PARSER_CHANGED						 object : nil				 ];												[nc addObserver : self					   selector : @selector(handleFontChanged:)						   name : NOTIFICATION_PREFERENCE_FONT_CHANGED						 object : nil				 ];												[nc addObserver : self					   selector : @selector(handleLexerChanged:)						   name : NOTIFICATION_PREFERENCE_LEXER_CHANGED						 object : nil				 ];								[nc addObserver : self					   selector : @selector(handleApplicationChanged:)						   name : NOTIFICATION_PREFERENCE_APPLICATION_CHANGED						 object : nil				 ];								grammarCheckerTaskDelegate = [[GrammarCheckTask alloc] initWithDocument : self];				grammarCheckerTask = [[ARDuplexTask alloc] init];				[grammarCheckerTask setDelegate : grammarCheckerTaskDelegate];				[grammarCheckerTask start];												[self load_default_config];														}		return self;}-(void)dealloc{		DLog(@"GrammarDesignerDocument::dealloc");		[self on_reset_timer : 0];				NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];		[nc removeObserver : self];				[grammarContent release];		grammarContent = nil;				[grammarFont release];		grammarFont = nil;			[inputFont release];		inputFont = nil;				[tagsFont release];		tagsFont = nil;				[treeViewFont release];		treeViewFont = nil;				[consoleFont release];		consoleFont = nil;				[super dealloc];}-(void)close{		DLog(@"GrammarDesignerDocument::close : doc retainCount %d", [self retainCount]);		[self on_reset_timer : 0];				[grammarCheckerTask		stop];		[grammarCheckerTask		release];		grammarCheckerTask	= nil;		[grammarCheckerTaskDelegate release];		grammarCheckerTaskDelegate = nil;				[super close];}- (NSString *)windowNibName{		return @"GrammarDesignerDocument";}- (void)windowControllerDidLoadNib:(NSWindowController *) aController{		DLog(@"GrammarDesignerDocument::windowControllerDidLoadNib");		[super windowControllerDidLoadNib:aController];				[self reset_view_font];}- (NSData *)dataOfType:(NSString *)typeName error:(NSError **)outError{		DLog(@"GrammarDesignerDocument::dataOfType");		return [grammarContent dataUsingEncoding : NSUTF8StringEncoding];}- (BOOL)readFromData:(NSData *)data ofType:(NSString *)typeName error:(NSError **)outError{		BOOL ret = YES;				DLog(@"GrammarDesignerDocument::readFromData length == %d", [data length]);				if([data length] >= 1024 * 1024 * 10)		{				if(outError)				{						*outError = [NSError errorWithDomain : NSFilePathErrorKey														code : 0													userInfo : nil									 ];				}								return NO;						}				size_t len = [data length];								arBuffer_t *buf = AR_CreateBuffer(len);		arString_t *str = AR_CreateString();		AR_InsertBuffer(buf, (const byte_t*)[data bytes], len);				if(AR_LoadBomTextFromBinary(buf, NULL, str))		{								[grammarContent release];				grammarContent = [ARUtility convertUTF32ToNSString : AR_GetStringCString(str)];				[grammarContent retain];				DLog(@"%@", grammarContent);				ret = YES;						}else		{				ret = NO;				if(outError)				{						*outError = [NSError errorWithDomain : NSFilePathErrorKey														code : 0													userInfo : nil									 ];				}		}				AR_DestroyBuffer(buf);		AR_DestroyString(str);		buf = NULL;		str = NULL;				return ret;}/****************************Timer Callback************************/- (void)onGrammarChecker:(NSTimer*)theTimer{		DLog(@"GrammarDesignerDocument::onGrammarChecker for timer %@", theTimer);				GrammarCheckTaskMessage *msg = [[GrammarCheckTaskMessage alloc] initWithSources : @"abcdefg"];		[grammarCheckerTask PostMsgToWorker : msg];		}-(void) onGrammarCheckerCompleted : (const cfgConfig_t*)parseResult{		DLog(@"GrammarDesignerDocument::onGrammarCheckerCompleted");}/********************************************Notification*********************/-(void)handleFontChanged : (NSNotification*)note{		DLog(@"GrammarDesignerDocument::handleFontChanged for notification %@", note);				[self load_font_config];		[self reset_view_font];		}-(void)handleLexerChanged : (NSNotification*)note{		DLog(@"GrammarDesignerDocument::handleLexerChanged for notification %@", note);				}-(void)handleParserChanged : (NSNotification*)note{		DLog(@"GrammarDesignerDocument::handleParserChanged for notification %@", note);				NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];		NSInteger interval = (NSInteger)[defaults doubleForKey : PREFERENCE_BUILD_TAGS_INTERVAL];		[self on_reset_timer : interval];		}-(void)handleApplicationChanged : (NSNotification*)note{		DLog(@"GrammarDesignerDocument::handleApplicationChanged for notification %@", note);		}/***************************************************Action********************************/-(IBAction)setDocumentLexerSingleLine : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentLexerSingleLine");		lexIsSingleLine = !lexIsSingleLine;}-(IBAction)setDocumentLexerIgnoreCase : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentLexerIgnoreCase");		lexIsIgnoreCase = !lexIsIgnoreCase;}-(IBAction)setDocumentParserModeSLR : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentParserModeSLR");		parserMode = PARSER_SLR;}-(IBAction)setDocumentParserModeLALR : (id)sender{		DLog(@"On GrammarDesignerDocument::setDocumentParserModeLALR");		parserMode = PARSER_LALR;}-(IBAction)buildDocumentParser	:	(id)sender{		DLog(@"On GrammarDesignerDocument::buildDocumentParser");}-(IBAction)parseDocumentInput	:	(id)sender{		DLog(@"On GrammarDesignerDocument::parseDocumentInput");}-(IBAction)rebuildDocumentTags	:	(id)sender{		DLog(@"On GrammarDesignerDocument::rebuildDocumentTags");}-(IBAction)generateDocumentGrammarTemplateCode : (id)sender{		DLog(@"On GrammarDesignerDocument::generateDocumentGrammarTemplateCode");}/***********************************UpdateUI***********************//*  -(IBAction)setDocumentLexerSingleLine : (id)sender; -(IBAction)setDocumentLexerIgnoreCase : (id)sender; -(IBAction)setDocumentParserModeSLR : (id)sender; -(IBAction)setDocumentParserModeLALR : (id)sender; -(IBAction)buildDocumentParser	:	(id)sender; -(IBAction)parseDocumentInput	:	(id)sender; -(IBAction)rebuildDocumentTags	:	(id)sender; -(IBAction)generateDocumentGrammarTemplateCode : (id)sender;  */-(BOOL)validateUserInterfaceItem:(id < NSValidatedUserInterfaceItem >)item{		assert(item != nil);				NSMenuItem *menuItem = (NSMenuItem*)item;				if([menuItem action] == @selector(setDocumentLexerSingleLine:)) 		{				if(lexIsSingleLine)				{						[menuItem setState : NSOnState];				}else				{						[menuItem setState : NSOffState];				}		}else if([menuItem action] == @selector(setDocumentLexerIgnoreCase:))		{				if(lexIsIgnoreCase)				{						[menuItem setState : NSOnState];				}else				{						[menuItem setState : NSOffState];				}						}else if([menuItem action] == @selector(setDocumentParserModeSLR:))		{				if(parserMode == PARSER_SLR)				{						[menuItem setState : NSOnState];				}else				{						[menuItem setState : NSOffState];				}						}else if([menuItem action] == @selector(setDocumentParserModeLALR:))		{				if(parserMode == PARSER_LALR)				{						[menuItem setState : NSOnState];				}else				{						[menuItem setState : NSOffState];				}						}else if([menuItem action] == @selector(buildDocumentParser:))		{						}else if([menuItem action] == @selector(parseDocumentInput:))		{						}else if([menuItem action] == @selector(rebuildDocumentTags:))		{						}else if([menuItem action] == @selector(generateDocumentGrammarTemplateCode:))		{						}			return YES;}@end