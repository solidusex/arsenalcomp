/* * Copyright (c) 2011 by Solidus * This file is part of Arsenal library tools source code. * * Permission to use, copy, modify, distribute and sell this software * and its documentation for any purpose is hereby granted without fee, * provided that the above copyright notice appear in all copies and * that both that copyright notice and this permission notice appear * in supporting documentation.It is provided "as is" without express  * or implied warranty. * */#import "ApplicationDelegate.h"#import "Preferences.h"#import "GrammarDesignerDocument.h"/***********************************DefaultARContext**********************************************/@interface DefaultARContext		:		NSObject<ArsenalContext>-(void)onPrint	:		(NSString*) msg;-(void)onError	:		(NSInteger)level  msg : (NSString*)msg;@end@implementation DefaultARContext-(void)onPrint	:		(NSString*) msg{		assert(msg);		DLog(@"%@", msg);}-(void)onError	:		(NSInteger)level  msg : (NSString*)msg{		assert(msg);		DLog(@"Level == %d : msg == %@", level, msg);		}@end/***********************************DefaultARContext*********************************************End*//***********************************GrammarCheckWorker**********************************************/@interface GrammarTaskMessage : ARDuplexTaskMessage{		NSString				*sourcesCode;		const cfgConfig_t		*parseResult;}@property		(readwrite, retain) NSString				*sourcesCode;@property		(readwrite, assign) const cfgConfig_t		*parseResult;@end@implementation GrammarTaskMessage@synthesize		parseResult;@synthesize		sourcesCode;-(id)initWithSources : (NSString*)src{		self = [super initWithName : nil];		if(self)		{				[src retain];				sourcesCode = src;				parseResult = NULL;		}		return self;}-(void)dealloc{		[sourcesCode release];		sourcesCode = nil;				if(parseResult)		{				CFG_DestroyGrammarConfig(parseResult);				parseResult = NULL;		}				[super dealloc];}-(void)run{		DLog(@"GrammarTaskMessage::run");}@end@interface GrammarCheckWorker : NSObject<ARDuplexTaskDelegate>@end@implementation GrammarCheckWorker-(void)onWorkerBegin{		DLog(@"GrammarCheckWorker::onWorkerBegin");}-(void)onWorkerEnd{		DLog(@"GrammarCheckWorker::onWorkerEnd");}-(void)handleWorkerThreadMessage : (ARDuplexTaskMessage*)msg forTask : (ARDuplexTask*)task{		assert(msg != nil && task != nil);		GrammarTaskMessage *gmrMsg = (GrammarTaskMessage*)msg;		DLog(@"GrammarCheckWorker::handleWorkerThreadMessage : Sources == %@", gmrMsg.sourcesCode);		[gmrMsg run];		[task PostMsgToMain : msg];		}-(void)handleMainThreadMessage : (ARDuplexTaskMessage*)msg forTask : (ARDuplexTask*)task{		GrammarTaskMessage *gmrMsg = (GrammarTaskMessage*)msg;		DLog(@"GrammarCheckWorker::handleMainThreadMessage : Sources == %@", gmrMsg.sourcesCode);		[msg release];}@end/***********************************GrammarCheckWorker*********************************************End*//*********************************************************************************/@implementation ApplicationDelegate+(void)initialize{		[Preferences setDefaultPreferences];}-(id)init{		self = [super init];		if(self)		{				preferences = nil;																					}				return (self);}-(void)dealloc{		[super dealloc];}- (BOOL)applicationShouldOpenUntitledFile:(NSApplication *)sender{		return YES;}- (void)applicationWillFinishLaunching:(NSNotification *)aNotification{				DLog(@"%@", aNotification);		DefaultARContext *ctx = [[DefaultARContext alloc] init];		[ArsenalOC initializeArsenalOC : ctx];		[ctx release];								/*********************************************/		grammarCheckWorker = [[GrammarCheckWorker alloc] init];		grammarCheckTask = [[ARDuplexTask alloc] init];				[grammarCheckTask setDelegate : grammarCheckWorker];				[grammarCheckTask start];				[self onGrammarTimerChanged];								NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];		[nc addObserver : self			   selector : @selector(handleParserChanged:)				   name : NOTIFICATION_PREFERENCE_PARSER_CHANGED				 object : nil		 ];						[nc addObserver : self			   selector : @selector(handleFontChanged:)				   name : NOTIFICATION_PREFERENCE_FONT_CHANGED				 object : nil		 ];						[nc addObserver : self			   selector : @selector(handleLexerChanged:)				   name : NOTIFICATION_PREFERENCE_LEXER_CHANGED				 object : nil		 ];				/********************************************End*/		}- (void)applicationDidFinishLaunching:(NSNotification *)aNotification{		DLog(@"%@", aNotification);}- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication *)sender{				return NSTerminateNow;}- (void)applicationWillTerminate:(NSNotification *)aNotification{		DLog(@"%@", aNotification);				/*********************************************/				NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];		[nc removeObserver : self];				[grammarCheckTask stop];				[grammarCheckTimer invalidate];		[grammarCheckTimer release];		grammarCheckTimer = nil;				[grammarCheckTask release];		grammarCheckTask = nil;				[grammarCheckWorker release];		grammarCheckWorker = nil;		/********************************************End*/				[ArsenalOC uninitializeArsenalOC];}/***************************************************************************************/-(void)onGrammarCheckTimer : (NSTimer*)timer{		DLog(@"ApplicationDelegate::onGrammarCheckTimer");								GrammarTaskMessage *msg = [[GrammarTaskMessage alloc] initWithSources : @"sources Tengu GrammarDesigner"];		[grammarCheckTask PostMsgToWorker : msg];		}-(void)onGrammarTimerChanged{		DLog(@"ApplicationDelegate::onGrammarTimerChanged");				NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];				NSInteger interval_ms = [defaults integerForKey : PREFERENCE_BUILD_TAGS_INTERVAL ];						DLog(@"timer changed to %fs", (double)interval_ms / (double)1000.000f);				if(grammarCheckTimer != nil)		{				[grammarCheckTimer invalidate];				[grammarCheckTimer release];				grammarCheckTimer = nil;		}				if(interval_ms > 0)		{								grammarCheckTimer = [NSTimer scheduledTimerWithTimeInterval : (double)interval_ms / (double)1000.000f																	 target : self																   selector : @selector(onGrammarCheckTimer:)																   userInfo : nil																	repeats : YES									 ];								[grammarCheckTimer retain];		}else		{				DLog(@"ApplicationDelegate:Disable Grammar Check");		}				}-(void)handleFontChanged : (NSNotification*)note{		DLog(@"ApplicationDelegate::handleFontChanged for notification %@", note);				NSArray *docs = [[NSDocumentController sharedDocumentController] documents];				const size_t docs_cnt = [docs count];						for(size_t i = 0; i < docs_cnt; ++i)		{				GrammarDesignerDocument *pdoc = [docs objectAtIndex : i];				[pdoc reloadPreferences];		}}-(void)handleLexerChanged : (NSNotification*)note{		DLog(@"ApplicationDelegate::handleLexerChanged for notification %@", note);				NSArray *docs = [[NSDocumentController sharedDocumentController] documents];				const size_t docs_cnt = [docs count];						for(size_t i = 0; i < docs_cnt; ++i)		{				GrammarDesignerDocument *pdoc = [docs objectAtIndex : i];				[pdoc reloadPreferences];		}		}-(void)handleParserChanged : (NSNotification*)note{		DLog(@"ApplicationDelegate::handleParserChanged for notification %@", note);				/***********ApplicationDelegate 相关改变****************/		[self onGrammarTimerChanged];						/***********Documents 改变****************/				NSArray *docs = [[NSDocumentController sharedDocumentController] documents];				const size_t docs_cnt = [docs count];						for(size_t i = 0; i < docs_cnt; ++i)		{				GrammarDesignerDocument *pdoc = [docs objectAtIndex : i];				[pdoc reloadPreferences];		}		}/**************************************Action*************************************/-(IBAction)showPreferencePanel : (id)sender{		if(preferences == nil)		{				preferences = [[Preferences alloc] init];		}				[preferences show : self];}/**************************************TestAction*************************************/-(IBAction)onTest : (id)sender{		DLog(@"On ApplicationDelegate::OnTest");		@try{				AR_Test();		}@catch(NSException *e)		{				NSLog(@"Name == %@ reason == %@", [e name], [e reason]);		}}@end