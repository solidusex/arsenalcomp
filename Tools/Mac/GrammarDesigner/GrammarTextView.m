////  GrammarTextView.m//  GrammarDesigner////  Created by liu peng on 9/26/11.//  Copyright 2011 none. All rights reserved.//#import "GrammarTextView.h"@implementation GrammarTextView-(void)disableLineWrap{		const float LargeNumberForText = 1.0e7;				NSScrollView *scrollView = [self enclosingScrollView];		[scrollView setHasVerticalScroller:YES];		[scrollView setHasHorizontalScroller:YES];		[scrollView setAutoresizingMask:(NSViewWidthSizable | NSViewHeightSizable)];				NSTextContainer *textContainer = [self textContainer];		[textContainer setContainerSize:NSMakeSize(LargeNumberForText, LargeNumberForText)];		[textContainer setWidthTracksTextView:NO];		[textContainer setHeightTracksTextView:NO];				[self setMaxSize:NSMakeSize(LargeNumberForText, LargeNumberForText)];		[self setHorizontallyResizable:YES];		[self setVerticallyResizable:YES];		[self setAutoresizingMask:NSViewNotSizable];}-(void)resetFont{		NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];				NSString *name;		NSInteger size;						name = [defaults stringForKey : PREFERENCE_FONT_GRAMMAR_NAME];		size = (NSInteger)[defaults doubleForKey : PREFERENCE_FONT_GRAMMAR_SIZE];				[font release];		font = [NSFont fontWithName : name							   size : size				];				[font retain];				[self setFont : font];}-(void)handleFontChanged : (NSNotification*)note{		DLog(@"GrammarTextView::handleFontChanged for notification %@", note);		[self resetFont];		}-(void)awakeFromNib{				NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];		[nc addObserver : self			   selector : @selector(handleFontChanged:)				   name : NOTIFICATION_PREFERENCE_FONT_CHANGED				 object : nil		 ];				[self resetFont];				[self disableLineWrap];				[self setDelegate : self];				parserIsBuild = NO;}-(void)dealloc{		NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];		[nc removeObserver : self];				[font release];		font = nil;		[super dealloc];}- (void)textDidChange:(NSNotification *)note{		DLog(@"GrammarTextView::textDidChange %@",note);}#if(0)- (void)declareMenuItems:(id )menuController {		// 1. create menu item to contain submenu. create submenu. connect submenu to submenu item.		NSMenuItem *submenuItem = [[[NSMenuItem alloc] initWithTitle:@"Example Plugin Submenu Item" action:NULL keyEquivalent:@""] autorelease];		NSMenu *submenu = [[[NSMenu alloc] init] autorelease];		[submenuItem setSubmenu:submenu];				// 2. now insert into blocks and declare submenuItem and submenu so that other items can		// be inserted into the menu. Not doing this step isn't neccessarily wrong, it just means that this		// submenu isn't availible for other plugins to add items too.		[menuController insertMenuItem:submenuItem insertPath:@"/Application/PreferencesGroup"];		[menuController declareMenuItem:submenuItem menuItemPath:@"/Application/SubmenuItem"];		[menuController declareMenu:submenu menuPath:@"/Application/Submenu"];				// 3. now insert a menu into our declared submenu. this step would not be possible if step 2 were skipped.		NSMenuItem *itemInSubmenu = [[[NSMenuItem alloc] initWithTitle:@"Item In Submenu" action:@selector(doNothing:) keyEquivalent:@""] autorelease];		[menuController insertMenuItem:itemInSubmenu insertPath:@"/Application/Submenu/TopGroup"];		[menuController declareMenuItem:itemInSubmenu menuItemPath:@"/Application/Submenu/ItemInSubmenu"];}#endif- (NSMenu *)defaultMenu {		        NSMenu *theMenu = [[[NSMenu alloc] initWithTitle:@"Grammar Text View Context Menu"] autorelease];		        [theMenu insertItemWithTitle:@"Find All References" action:@selector(findAllReferences:) keyEquivalent:@"" atIndex:0];        [theMenu insertItemWithTitle:@"Build" action:@selector(buildParser:) keyEquivalent:@"" atIndex:1];				NSMenuItem *showItem = nil;				{				NSMenu *showMenu = [[[NSMenu alloc] initWithTitle:@"Grammar Text View Context Show Menu"] autorelease];				[showMenu insertItemWithTitle:@"Action Table" action:@selector(showActionTable:) keyEquivalent:@"" atIndex:0];				[showMenu insertItemWithTitle:@"Conflicts" action:@selector(showConflicts:) keyEquivalent:@"" atIndex:1];				[showMenu insertItemWithTitle:@"FirstFollow" action:@selector(showFirstFollow:) keyEquivalent:@"" atIndex:2];				[showMenu insertItemWithTitle:@"Left Recursive" action:@selector(showLeftRecursive:) keyEquivalent:@"" atIndex:3];				[showMenu insertItemWithTitle:@"Left Factor" action:@selector(showLeftFactor:) keyEquivalent:@"" atIndex:4];								showItem = [[NSMenuItem alloc] initWithTitle : @"Show"													  action : NULL											   keyEquivalent : @""							];				[showItem  setSubmenu : showMenu];						}				[theMenu insertItem : showItem					 atIndex: 2		 ];				[theMenu insertItem : [NSMenuItem separatorItem]					atIndex : 3		 ];		[theMenu insertItemWithTitle:@"Cut" action:@selector(cut:) keyEquivalent:@"" atIndex:4];		[theMenu insertItemWithTitle:@"Copy" action:@selector(copy:) keyEquivalent:@"" atIndex:5];		[theMenu insertItemWithTitle:@"Paste" action:@selector(paste:) keyEquivalent:@"" atIndex:6];				[theMenu insertItem : [NSMenuItem separatorItem]					atIndex : 7		 ];				[theMenu insertItemWithTitle:@"Select All" action:@selector(selectAll:) keyEquivalent:@"" atIndex:8];		        return theMenu;}-(NSMenu *)menuForEvent:(NSEvent *)theEvent {        return [self defaultMenu];  		}-(void) findAllReferences :(id)sender{		DLog(@"On findAllReferences");		NSRange sel_range = [self selectedRange];				DLog(@"location = %d length = %d", sel_range.location, sel_range.length);		}-(BOOL)validateUserInterfaceItem:(id < NSValidatedUserInterfaceItem >)item{				BOOL ret = YES;		assert(item != nil);				NSMenuItem *menuItem = (NSMenuItem*)item;				NSString *s = [self string];										if([menuItem action] == @selector(findAllReferences:)) 		{				NSRange sel_range = [self selectedRange];				if(sel_range.length == 0)				{						ret = NO;				}						}else if([menuItem action] == @selector(buildParser:)) 		{				if([s length] == 0)				{						ret = NO;				}						}else if([menuItem action] == @selector(showActionTable:))		{				ret = parserIsBuild;						}else if([menuItem action] == @selector(showConflicts:))		{				ret = parserIsBuild;						}else if([menuItem action] == @selector(showFirstFollow:))		{				ret = parserIsBuild;						}else if([menuItem action] == @selector(showLeftRecursive:))		{				ret = parserIsBuild;						}else if([menuItem action] == @selector(showLeftFactor:))		{				ret = parserIsBuild;		}else		{				ret = [super validateUserInterfaceItem : item];		}						return ret;				}@end